import * from "@apexlang/core"

namespace "apex.testing"
  @info(
    title: "Test Output API"
    description: "Apex spec used to test the output of code generators."
    version: "1.0.0"
    termsOfService: "https://api.goodcorp.com/terms/"
    contact: {
      name: "API Support"
      url: "https://api.goodcorp.com/support"
      email: "api@goodcorp.com"
    },
    license: {
      name: "Apache 2.0"
      url: "https://www.apache.org/licenses/LICENSE-2.0"
    }
  )

role MyService @service @uses(["Repository"]) {
  emptyVoid(): void
    @GET
  unaryType{thing: MyType}: MyType
    @path("/unaryType") @POST
  unaryEnum{value: MyEnum}: MyEnum
    @path("/unaryEnum") @POST
  unaryString{value: string}: string
    @path("/unaryString") @POST
  unaryI64{value: i64}: i64
    @path("/unaryI64") @POST
  unaryI32{value: i32}: i32
    @path("/unaryI32") @POST
  unaryI16{value: i16}: i16
    @path("/unaryI16") @POST
  unaryI8{value: i8}: i8
    @path("/unaryI8") @POST
  unaryU64{value: u64}: u64
    @path("/unaryU64") @POST
  unaryU32{value: u32}: u32
    @path("/unaryU32") @POST
  unaryU16{value: u16}: u16
    @path("/unaryU16") @POST
  unaryU8{value: u8}: u8
    @path("/unaryU8") @POST
  unaryF64{value: f64}: f64
    @path("/unaryF64") @POST
  unaryF32{value: f32}: f32
    @path("/unaryF32") @POST
  unaryBytes{value: bytes}: bytes
    @path("/unaryBytes") @POST
}

role Repository @dependency {
  getData(): MyType
}

union MyUnion = MyType | MyEnum

"MyType is a class"
type MyType {
  "same type value"
  sameValue: MyType? @n(1)
  "type value"
  typeValue: MyOtherType @n(2)
  "string value"
  stringValue: string @n(3)
  "i64 value"
  i64Value: i64 @n(4)
  "i32 value"
  i32Value: i32 @n(5)
  "i16 value"
  i16Value: i16 @n(6)
  "i8 value"
  i8Value: i8 @n(7)
  "u64 value"
  u64Value: u64 @n(8)
  "u32 value"
  u32Value: u32 @n(9)
  "u16 value"
  u16Value: u16 @n(10)
  "u8 value"
  u8Value: u8 @n(11)
  "f64 value"
  f64Value: f64 @n(12)
  "f32 value"
  f32Value: f32 @n(13)
  "bytes value"
  bytesValue: bytes @n(14)
  "map value"
  mapValue: { string: i64 } @n(15)
  "map of types"
  mapOfTypes: { string: MyType } @n(16)
  "array value"
  arrayValue: [string] @n(17)
  "array of types"
  arrayOfTypes: [MyType] @n(18)
}

type MyOtherType {
  foo: string @n(1)
  bar: string @n(2)
}

"MyEnum is an emuneration"
enum MyEnum {
  "ONE value"
  ONE = 0 as "one"
  "TWO value"
  TWO = 1
  "THREE value"
  THREE = 2 as "three"
}

"Example: phone numbers"
type PhoneNumber {
  number: string
  type: PhoneType
}

"Example: enum"
enum PhoneType {
  mobile = 0 as "Mobile"
  home = 1 as "Home"
  work = 2 as "Work"
}

"Example Union"
union Animal = Cat | Dog 

"A type Cat used for union"
type Cat {
  lives: u8 = 9
}

"A type Dog used for union"
type Dog {
  years: string = "7"
}

"An alias for UUID"
alias UUID = string

"An alias for string"
alias PrimitiveAlias = string

"An alias for a complex type"
alias Beagle = Dog


role PetShop {
  getDog(ID: string): Dog
}