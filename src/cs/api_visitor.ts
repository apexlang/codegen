/*
Copyright 2022 The Apex Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import {
  BaseVisitor,
  Context,
} from "https://raw.githubusercontent.com/apexlang/apex-js/deno-wip/src/model/mod.ts";
import { isService, pascalCase } from "../utils/mod.ts";
import { translations } from "./constant.ts";
import { PathDirective } from "../rest/mod.ts";
import { expandType, parseNamespaceName } from "./helpers.ts";

export class MinimalAPIVisitor extends BaseVisitor {
  visitNamespaceBefore(context: Context) {
    this.write(`// Code generated by @apexlang/codegen. DO NOT EDIT.\n\n`);
    this.write(`using System;\nusing Microsoft.AspNetCore.Builder;\n\n`);
    super.visitNamespaceBefore(context);
  }

  visitNamespace(context: Context) {
    this.write(`namespace ${parseNamespaceName(context.namespace.name)} {\n`);
    super.visitNamespace(context);
  }

  visitNamespaceAfter(context: Context) {
    this.write(`}\n`);
    super.visitNamespaceAfter(context);
  }

  visitInterfaceBefore(context: Context): void {
    if (!isService(context)) {
      return;
    }

    const { interface: iface } = context;
    const visitor = new ApiServiceVisitor(this.writer);
    iface.accept(context, visitor);
  }
}

export class ApiServiceVisitor extends BaseVisitor {
  visitInterfaceBefore(context: Context): void {
    let path = "";
    context.namespace.annotation("path", (a) => {
      path = a?.convert<PathDirective>().value;
    });
    this.write(`  public class Setup {\n`);
    this.write(
      `    public Setup(WebApplication app, ${
        pascalCase(
          context.interface.name,
        )
      } service) {\n`,
    );

    for (const method of context.interface.operations) {
      let subPath = "";
      method.annotation("path", (a) => {
        subPath = a?.convert<PathDirective>().value;
      });
      this.write(`      app.`);

      if (method.annotation("GET")) {
        this.write(`MapGet`);
      } else if (method.annotation("POST")) {
        this.write(`MapPost`);
      } else if (method.annotation("PUT")) {
        this.write(`MapPut`);
      } else if (method.annotation("DELETE")) {
        this.write(`MapDelete`);
      }

      this.write(`("${path}${subPath}", (`);
      let params = [];
      if (method.parameters.length > 0) {
        for (let i = 0; i < method.parameters.length; ++i) {
          const param = method.parameters[i];
          const type = translations.get(expandType(param.type)) ||
            expandType(param.type);
          this.write(
            `${type} ${param.name}${
              i != method.parameters.length - 1 ? ", " : ""
            }`,
          );
          params.push(param.name);
        }
      }
      this.write(
        `) => service.${pascalCase(method.name)}(${params.join(", ")}));\n`,
      );
    }
    this.write(`    }\n  }\n`);
  }
}

// Language: typescript
