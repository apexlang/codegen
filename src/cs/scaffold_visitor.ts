/*
Copyright 2022 The Apex Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

export * from "./api_visitor.ts";
export * from "./types_visitor.ts";
export * from "./scaffold_visitor.ts";
export * from "./interface_visitor.ts";
export * from "./interfaces_visitor.ts";
export * from "./main_visitor.ts";
export * from "./index_visitor.ts";
export * from "./enum_visitor.ts";
export * from "./union_visitor.ts";
export * from "./alias_visitor.ts";

export { InterfacesVisitor as default } from "./interfaces_visitor.ts";

import { formatComment, isOneOfType, pascalCase } from "../utils/mod.ts";
import {
  BaseVisitor,
  Context,
} from "https://raw.githubusercontent.com/apexlang/apex-js/deno-wip/src/model/mod.ts";
import { expandType, parseNamespaceName } from "./helpers.ts";

export class ScaffoldVisitor extends BaseVisitor {
  // visitNamespaceBefore(context: Context) {
  //   this.write(`// Code generated by @apexlang/codegen. DO NOT EDIT.\n\n`);
  //   this.write(`using System;\n\n`);
  //   super.visitNamespaceBefore(context);
  // }

  visitNamespace(context: Context) {
    this.write(`namespace ${parseNamespaceName(context.namespace.name)} {\n`);

    const service = new ServiceVisitor(this.writer);
    context.namespace.accept(context, service);

    super.visitNamespace(context);
  }

  visitNamespaceAfter(context: Context) {
    this.write(`}\n`);
    super.visitNamespaceAfter(context);
  }
}

export class ServiceVisitor extends BaseVisitor {
  visitInterfaceBefore(context: Context) {
    if (!isValid(context)) {
      return;
    }

    const { interface: iface } = context;
    let dependencies: string[] = [];
    iface.annotation("uses", (a) => {
      if (a.arguments.length > 0) {
        dependencies = a.arguments[0].value.getValue() as string[];
      }
    });
    this.write(`  public class ${iface.name}Impl : ${iface.name} {\n`);

    dependencies.map((value, index) => {
      this.write(`    private ${value} ${value.toLowerCase()};\n`);
      if (index == dependencies.length - 1) this.write(`\n`);
    });

    dependencies.map((value, index) => {
      this.write(
        `    public ${iface.name}Impl (${value}Impl ${value.toLowerCase()}) {\n`,
      );
      this.write(
        `      this.${value.toLowerCase()} = ${value.toLowerCase()};\n`,
      );
      this.write(`\t }\n`);
      if (index == dependencies.length - 1) this.write(`\n`);
    });

    super.visitInterfaceBefore(context);
  }

  visitInterface(context: Context) {
    if (!isValid(context)) {
      return;
    }

    const operations = context.interface.operations;
    for (let i = 0; i < operations.length; ++i) {
      if (i > 0) {
        this.write(`\n`);
      }
      const operation = operations[i];
      const type = expandType(operation.type);

      this.write(formatComment("    // ", operation.description));
      this.write(`    public ${type} ${pascalCase(operation.name)}(`);

      const parameters = operation.parameters;
      for (let j = 0; j < parameters.length; ++j) {
        const parameter = parameters[j];

        this.write(`${expandType(parameter.type)} ${parameter.name}`);
        if (j < parameters.length - 1) this.write(`, `);
      }
      this.write(`)\n    {\n`);

      if (type == "void") {
        this.write(`      return; // TODO: Provide implementation.\n`);
      } else {
        this.write(
          `      return new ${type}(); // TODO: Provide implementation.\n`,
        );
      }

      this.write(`    }\n`);
    }
    this.write(`  }\n\n`);
    super.visitInterface(context);
  }
}

function isValid(context: Context): boolean {
  const roleNames = (context.config.names as string[]) || [];
  const roleTypes = (context.config.types as string[]) || [];
  const { interface: iface } = context;
  return isOneOfType(context, roleTypes) || roleNames.indexOf(iface.name) != -1;
}
