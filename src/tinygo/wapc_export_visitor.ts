/*
Copyright 2022 The Apex Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import { BaseVisitor, Context, Writer } from "@apexlang/core/model";
import {
  convertOperationToType,
  convertUnionToType,
  uncapitalize,
} from "../utils/index.js";
import { StructVisitor } from "../go/index.js";
import { WapcHostVisitor } from "./wapc_host_visitor.js";
import { RegisterVisitor } from "./wapc_handlers_visitor.js";
import { WrapperFuncsVisitor } from "./wapc_wrappers_visitor.js";
import { MsgPackDecoderVisitor } from "./msgpack_decoder_visitor.js";
import {
  MsgPackEncoderUnionVisitor,
  MsgPackEncoderVisitor,
} from "./msgpack_encoder_visitor.js";

export class WapcExportVisitor extends BaseVisitor {
  constructor(writer: Writer) {
    super(writer);
    this.setCallback(
      "AllOperationsBefore",
      "host",
      (context: Context): void => {
        const host = new WapcHostVisitor(writer);
        context.namespace.accept(context, host);
      }
    );
    this.setCallback(
      "AllOperationsBefore",
      "handlers",
      (context: Context): void => {
        const register = new RegisterVisitor(this.writer);
        context.namespace.accept(context, register);
      }
    );
    this.setCallback(
      "AllOperationsBefore",
      "wrappers",
      (context: Context): void => {
        const wrapperFuncs = new WrapperFuncsVisitor(this.writer);
        context.namespace.accept(context, wrapperFuncs);
      }
    );
    this.setCallback(
      "OperationAfter",
      "arguments",
      (context: Context): void => {
        const { interface: iface, operation } = context;
        if (operation.parameters.length == 0 || operation.isUnary()) {
          return;
        }
        const tr = context.getType.bind(context);
        const type = convertOperationToType(
          tr,
          operation,
          uncapitalize(iface.name)
        );
        const ctx = context.clone({ type: type });
        const struct = new StructVisitor(this.writer);
        type.accept(ctx, struct);
        const decoder = new MsgPackDecoderVisitor(this.writer);
        type.accept(ctx, decoder);
        const encoder = new MsgPackEncoderVisitor(this.writer);
        type.accept(ctx, encoder);
        this.write(`\n`);
      }
    );
    this.setCallback("Type", "struct", (context: Context): void => {
      const { type } = context;
      const decoder = new MsgPackDecoderVisitor(this.writer);
      type.accept(context, decoder);
      const encoder = new MsgPackEncoderVisitor(this.writer);
      type.accept(context, encoder);
      this.write(`\n`);
    });
    this.setCallback("Union", "struct", (context: Context): void => {
      const { union } = context;
      const tr = context.getType.bind(context);
      const type = convertUnionToType(tr, union);
      // const ctx = context.clone({ type: type });
      // const decoder = new MsgPackDecoderVisitor(this.writer);
      // type.accept(ctx, decoder);
      // const encoder = new MsgPackEncoderUnionVisitor(this.writer);
      // type.accept(ctx, encoder);
      this.write(`\n`);
    });
  }

  visitNamespaceBefore(context: Context): void {
    const packageName = context.config["package"] || "module";
    this.write(`// Code generated by @apexlang/codegen. DO NOT EDIT.

    package ${packageName}

    import (
      "context"

      wapc "github.com/wapc/wapc-guest-tinygo"
      msgpack "github.com/wapc/tinygo-msgpack"
    )\n\n`);
    super.triggerNamespaceBefore(context);
  }

  visitNamespaceAfter(context: Context): void {
    this.write(`func castString[T ~string](value string, err error) (T, error) {
      return T(value), err
    }

    func castNillableString[T ~string](value *string, err error) (*T, error) {
      ret := T(*value)
      return &ret, err
    }

    func castStringPtr[T ~string](value string, err error) (*T, error) {
      if err != nil {
        return nil, err
      }
      val := T(value)
      return &val, nil
    }

    func castEnum[T ~int32](value int32, err error) (T, error) {
      return T(value), err
    }

    func castNillableEnum[T ~int32](value *int32, err error) (*T, error) {
      ret := T(*value)
      return &ret, err
    }

    func castEnumPtr[T ~int32](value int32, err error) (*T, error) {
      if err != nil {
        return nil, err
      }
      val := T(value)
      return &val, nil
    }\n`);
  }
}
