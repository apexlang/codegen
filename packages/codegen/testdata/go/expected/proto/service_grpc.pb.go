// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MyServiceClient is the client API for MyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyServiceClient interface {
	EmptyVoid(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnaryType(ctx context.Context, in *MyType, opts ...grpc.CallOption) (*MyType, error)
	UnaryEnum(ctx context.Context, in *MyEnumValue, opts ...grpc.CallOption) (*MyEnumValue, error)
	UnaryAlias(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	UnaryString(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	UnaryI64(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*wrapperspb.Int64Value, error)
	UnaryI32(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*wrapperspb.Int32Value, error)
	UnaryI16(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*wrapperspb.Int32Value, error)
	UnaryI8(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*wrapperspb.Int32Value, error)
	UnaryU64(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error)
	UnaryU32(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (*wrapperspb.UInt32Value, error)
	UnaryU16(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (*wrapperspb.UInt32Value, error)
	UnaryU8(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (*wrapperspb.UInt32Value, error)
	UnaryF64(ctx context.Context, in *wrapperspb.DoubleValue, opts ...grpc.CallOption) (*wrapperspb.DoubleValue, error)
	UnaryF32(ctx context.Context, in *wrapperspb.FloatValue, opts ...grpc.CallOption) (*wrapperspb.FloatValue, error)
	UnaryBytes(ctx context.Context, in *wrapperspb.BytesValue, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error)
	FuncType(ctx context.Context, in *MyServiceFuncTypeArgs, opts ...grpc.CallOption) (*MyType, error)
	FuncEnum(ctx context.Context, in *MyServiceFuncEnumArgs, opts ...grpc.CallOption) (*MyEnumValue, error)
	FuncAlias(ctx context.Context, in *MyServiceFuncAliasArgs, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	FuncString(ctx context.Context, in *MyServiceFuncStringArgs, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	FuncI64(ctx context.Context, in *MyServiceFuncI64Args, opts ...grpc.CallOption) (*wrapperspb.Int64Value, error)
	FuncI32(ctx context.Context, in *MyServiceFuncI32Args, opts ...grpc.CallOption) (*wrapperspb.Int32Value, error)
	FuncI16(ctx context.Context, in *MyServiceFuncI16Args, opts ...grpc.CallOption) (*wrapperspb.Int32Value, error)
	FuncI8(ctx context.Context, in *MyServiceFuncI8Args, opts ...grpc.CallOption) (*wrapperspb.Int32Value, error)
	FuncU64(ctx context.Context, in *MyServiceFuncU64Args, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error)
	FuncU32(ctx context.Context, in *MyServiceFuncU32Args, opts ...grpc.CallOption) (*wrapperspb.UInt32Value, error)
	FuncU16(ctx context.Context, in *MyServiceFuncU16Args, opts ...grpc.CallOption) (*wrapperspb.UInt32Value, error)
	FuncU8(ctx context.Context, in *MyServiceFuncU8Args, opts ...grpc.CallOption) (*wrapperspb.UInt32Value, error)
	FuncF64(ctx context.Context, in *MyServiceFuncF64Args, opts ...grpc.CallOption) (*wrapperspb.DoubleValue, error)
	FuncF32(ctx context.Context, in *MyServiceFuncF32Args, opts ...grpc.CallOption) (*wrapperspb.FloatValue, error)
	FuncBytes(ctx context.Context, in *MyServiceFuncBytesArgs, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error)
}

type myServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMyServiceClient(cc grpc.ClientConnInterface) MyServiceClient {
	return &myServiceClient{cc}
}

func (c *myServiceClient) EmptyVoid(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/EmptyVoid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) UnaryType(ctx context.Context, in *MyType, opts ...grpc.CallOption) (*MyType, error) {
	out := new(MyType)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/UnaryType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) UnaryEnum(ctx context.Context, in *MyEnumValue, opts ...grpc.CallOption) (*MyEnumValue, error) {
	out := new(MyEnumValue)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/UnaryEnum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) UnaryAlias(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/UnaryAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) UnaryString(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/UnaryString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) UnaryI64(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*wrapperspb.Int64Value, error) {
	out := new(wrapperspb.Int64Value)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/UnaryI64", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) UnaryI32(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*wrapperspb.Int32Value, error) {
	out := new(wrapperspb.Int32Value)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/UnaryI32", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) UnaryI16(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*wrapperspb.Int32Value, error) {
	out := new(wrapperspb.Int32Value)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/UnaryI16", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) UnaryI8(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*wrapperspb.Int32Value, error) {
	out := new(wrapperspb.Int32Value)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/UnaryI8", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) UnaryU64(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error) {
	out := new(wrapperspb.UInt64Value)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/UnaryU64", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) UnaryU32(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (*wrapperspb.UInt32Value, error) {
	out := new(wrapperspb.UInt32Value)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/UnaryU32", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) UnaryU16(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (*wrapperspb.UInt32Value, error) {
	out := new(wrapperspb.UInt32Value)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/UnaryU16", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) UnaryU8(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (*wrapperspb.UInt32Value, error) {
	out := new(wrapperspb.UInt32Value)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/UnaryU8", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) UnaryF64(ctx context.Context, in *wrapperspb.DoubleValue, opts ...grpc.CallOption) (*wrapperspb.DoubleValue, error) {
	out := new(wrapperspb.DoubleValue)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/UnaryF64", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) UnaryF32(ctx context.Context, in *wrapperspb.FloatValue, opts ...grpc.CallOption) (*wrapperspb.FloatValue, error) {
	out := new(wrapperspb.FloatValue)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/UnaryF32", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) UnaryBytes(ctx context.Context, in *wrapperspb.BytesValue, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error) {
	out := new(wrapperspb.BytesValue)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/UnaryBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) FuncType(ctx context.Context, in *MyServiceFuncTypeArgs, opts ...grpc.CallOption) (*MyType, error) {
	out := new(MyType)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/FuncType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) FuncEnum(ctx context.Context, in *MyServiceFuncEnumArgs, opts ...grpc.CallOption) (*MyEnumValue, error) {
	out := new(MyEnumValue)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/FuncEnum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) FuncAlias(ctx context.Context, in *MyServiceFuncAliasArgs, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/FuncAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) FuncString(ctx context.Context, in *MyServiceFuncStringArgs, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/FuncString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) FuncI64(ctx context.Context, in *MyServiceFuncI64Args, opts ...grpc.CallOption) (*wrapperspb.Int64Value, error) {
	out := new(wrapperspb.Int64Value)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/FuncI64", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) FuncI32(ctx context.Context, in *MyServiceFuncI32Args, opts ...grpc.CallOption) (*wrapperspb.Int32Value, error) {
	out := new(wrapperspb.Int32Value)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/FuncI32", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) FuncI16(ctx context.Context, in *MyServiceFuncI16Args, opts ...grpc.CallOption) (*wrapperspb.Int32Value, error) {
	out := new(wrapperspb.Int32Value)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/FuncI16", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) FuncI8(ctx context.Context, in *MyServiceFuncI8Args, opts ...grpc.CallOption) (*wrapperspb.Int32Value, error) {
	out := new(wrapperspb.Int32Value)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/FuncI8", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) FuncU64(ctx context.Context, in *MyServiceFuncU64Args, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error) {
	out := new(wrapperspb.UInt64Value)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/FuncU64", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) FuncU32(ctx context.Context, in *MyServiceFuncU32Args, opts ...grpc.CallOption) (*wrapperspb.UInt32Value, error) {
	out := new(wrapperspb.UInt32Value)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/FuncU32", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) FuncU16(ctx context.Context, in *MyServiceFuncU16Args, opts ...grpc.CallOption) (*wrapperspb.UInt32Value, error) {
	out := new(wrapperspb.UInt32Value)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/FuncU16", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) FuncU8(ctx context.Context, in *MyServiceFuncU8Args, opts ...grpc.CallOption) (*wrapperspb.UInt32Value, error) {
	out := new(wrapperspb.UInt32Value)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/FuncU8", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) FuncF64(ctx context.Context, in *MyServiceFuncF64Args, opts ...grpc.CallOption) (*wrapperspb.DoubleValue, error) {
	out := new(wrapperspb.DoubleValue)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/FuncF64", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) FuncF32(ctx context.Context, in *MyServiceFuncF32Args, opts ...grpc.CallOption) (*wrapperspb.FloatValue, error) {
	out := new(wrapperspb.FloatValue)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/FuncF32", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) FuncBytes(ctx context.Context, in *MyServiceFuncBytesArgs, opts ...grpc.CallOption) (*wrapperspb.BytesValue, error) {
	out := new(wrapperspb.BytesValue)
	err := c.cc.Invoke(ctx, "/apex.testing.MyService/FuncBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyServiceServer is the server API for MyService service.
// All implementations must embed UnimplementedMyServiceServer
// for forward compatibility
type MyServiceServer interface {
	EmptyVoid(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	UnaryType(context.Context, *MyType) (*MyType, error)
	UnaryEnum(context.Context, *MyEnumValue) (*MyEnumValue, error)
	UnaryAlias(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error)
	UnaryString(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error)
	UnaryI64(context.Context, *wrapperspb.Int64Value) (*wrapperspb.Int64Value, error)
	UnaryI32(context.Context, *wrapperspb.Int32Value) (*wrapperspb.Int32Value, error)
	UnaryI16(context.Context, *wrapperspb.Int32Value) (*wrapperspb.Int32Value, error)
	UnaryI8(context.Context, *wrapperspb.Int32Value) (*wrapperspb.Int32Value, error)
	UnaryU64(context.Context, *wrapperspb.UInt64Value) (*wrapperspb.UInt64Value, error)
	UnaryU32(context.Context, *wrapperspb.UInt32Value) (*wrapperspb.UInt32Value, error)
	UnaryU16(context.Context, *wrapperspb.UInt32Value) (*wrapperspb.UInt32Value, error)
	UnaryU8(context.Context, *wrapperspb.UInt32Value) (*wrapperspb.UInt32Value, error)
	UnaryF64(context.Context, *wrapperspb.DoubleValue) (*wrapperspb.DoubleValue, error)
	UnaryF32(context.Context, *wrapperspb.FloatValue) (*wrapperspb.FloatValue, error)
	UnaryBytes(context.Context, *wrapperspb.BytesValue) (*wrapperspb.BytesValue, error)
	FuncType(context.Context, *MyServiceFuncTypeArgs) (*MyType, error)
	FuncEnum(context.Context, *MyServiceFuncEnumArgs) (*MyEnumValue, error)
	FuncAlias(context.Context, *MyServiceFuncAliasArgs) (*wrapperspb.StringValue, error)
	FuncString(context.Context, *MyServiceFuncStringArgs) (*wrapperspb.StringValue, error)
	FuncI64(context.Context, *MyServiceFuncI64Args) (*wrapperspb.Int64Value, error)
	FuncI32(context.Context, *MyServiceFuncI32Args) (*wrapperspb.Int32Value, error)
	FuncI16(context.Context, *MyServiceFuncI16Args) (*wrapperspb.Int32Value, error)
	FuncI8(context.Context, *MyServiceFuncI8Args) (*wrapperspb.Int32Value, error)
	FuncU64(context.Context, *MyServiceFuncU64Args) (*wrapperspb.UInt64Value, error)
	FuncU32(context.Context, *MyServiceFuncU32Args) (*wrapperspb.UInt32Value, error)
	FuncU16(context.Context, *MyServiceFuncU16Args) (*wrapperspb.UInt32Value, error)
	FuncU8(context.Context, *MyServiceFuncU8Args) (*wrapperspb.UInt32Value, error)
	FuncF64(context.Context, *MyServiceFuncF64Args) (*wrapperspb.DoubleValue, error)
	FuncF32(context.Context, *MyServiceFuncF32Args) (*wrapperspb.FloatValue, error)
	FuncBytes(context.Context, *MyServiceFuncBytesArgs) (*wrapperspb.BytesValue, error)
	mustEmbedUnimplementedMyServiceServer()
}

// UnimplementedMyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMyServiceServer struct {
}

func (UnimplementedMyServiceServer) EmptyVoid(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmptyVoid not implemented")
}
func (UnimplementedMyServiceServer) UnaryType(context.Context, *MyType) (*MyType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryType not implemented")
}
func (UnimplementedMyServiceServer) UnaryEnum(context.Context, *MyEnumValue) (*MyEnumValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryEnum not implemented")
}
func (UnimplementedMyServiceServer) UnaryAlias(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryAlias not implemented")
}
func (UnimplementedMyServiceServer) UnaryString(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryString not implemented")
}
func (UnimplementedMyServiceServer) UnaryI64(context.Context, *wrapperspb.Int64Value) (*wrapperspb.Int64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryI64 not implemented")
}
func (UnimplementedMyServiceServer) UnaryI32(context.Context, *wrapperspb.Int32Value) (*wrapperspb.Int32Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryI32 not implemented")
}
func (UnimplementedMyServiceServer) UnaryI16(context.Context, *wrapperspb.Int32Value) (*wrapperspb.Int32Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryI16 not implemented")
}
func (UnimplementedMyServiceServer) UnaryI8(context.Context, *wrapperspb.Int32Value) (*wrapperspb.Int32Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryI8 not implemented")
}
func (UnimplementedMyServiceServer) UnaryU64(context.Context, *wrapperspb.UInt64Value) (*wrapperspb.UInt64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryU64 not implemented")
}
func (UnimplementedMyServiceServer) UnaryU32(context.Context, *wrapperspb.UInt32Value) (*wrapperspb.UInt32Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryU32 not implemented")
}
func (UnimplementedMyServiceServer) UnaryU16(context.Context, *wrapperspb.UInt32Value) (*wrapperspb.UInt32Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryU16 not implemented")
}
func (UnimplementedMyServiceServer) UnaryU8(context.Context, *wrapperspb.UInt32Value) (*wrapperspb.UInt32Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryU8 not implemented")
}
func (UnimplementedMyServiceServer) UnaryF64(context.Context, *wrapperspb.DoubleValue) (*wrapperspb.DoubleValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryF64 not implemented")
}
func (UnimplementedMyServiceServer) UnaryF32(context.Context, *wrapperspb.FloatValue) (*wrapperspb.FloatValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryF32 not implemented")
}
func (UnimplementedMyServiceServer) UnaryBytes(context.Context, *wrapperspb.BytesValue) (*wrapperspb.BytesValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryBytes not implemented")
}
func (UnimplementedMyServiceServer) FuncType(context.Context, *MyServiceFuncTypeArgs) (*MyType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FuncType not implemented")
}
func (UnimplementedMyServiceServer) FuncEnum(context.Context, *MyServiceFuncEnumArgs) (*MyEnumValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FuncEnum not implemented")
}
func (UnimplementedMyServiceServer) FuncAlias(context.Context, *MyServiceFuncAliasArgs) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FuncAlias not implemented")
}
func (UnimplementedMyServiceServer) FuncString(context.Context, *MyServiceFuncStringArgs) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FuncString not implemented")
}
func (UnimplementedMyServiceServer) FuncI64(context.Context, *MyServiceFuncI64Args) (*wrapperspb.Int64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FuncI64 not implemented")
}
func (UnimplementedMyServiceServer) FuncI32(context.Context, *MyServiceFuncI32Args) (*wrapperspb.Int32Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FuncI32 not implemented")
}
func (UnimplementedMyServiceServer) FuncI16(context.Context, *MyServiceFuncI16Args) (*wrapperspb.Int32Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FuncI16 not implemented")
}
func (UnimplementedMyServiceServer) FuncI8(context.Context, *MyServiceFuncI8Args) (*wrapperspb.Int32Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FuncI8 not implemented")
}
func (UnimplementedMyServiceServer) FuncU64(context.Context, *MyServiceFuncU64Args) (*wrapperspb.UInt64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FuncU64 not implemented")
}
func (UnimplementedMyServiceServer) FuncU32(context.Context, *MyServiceFuncU32Args) (*wrapperspb.UInt32Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FuncU32 not implemented")
}
func (UnimplementedMyServiceServer) FuncU16(context.Context, *MyServiceFuncU16Args) (*wrapperspb.UInt32Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FuncU16 not implemented")
}
func (UnimplementedMyServiceServer) FuncU8(context.Context, *MyServiceFuncU8Args) (*wrapperspb.UInt32Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FuncU8 not implemented")
}
func (UnimplementedMyServiceServer) FuncF64(context.Context, *MyServiceFuncF64Args) (*wrapperspb.DoubleValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FuncF64 not implemented")
}
func (UnimplementedMyServiceServer) FuncF32(context.Context, *MyServiceFuncF32Args) (*wrapperspb.FloatValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FuncF32 not implemented")
}
func (UnimplementedMyServiceServer) FuncBytes(context.Context, *MyServiceFuncBytesArgs) (*wrapperspb.BytesValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FuncBytes not implemented")
}
func (UnimplementedMyServiceServer) mustEmbedUnimplementedMyServiceServer() {}

// UnsafeMyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyServiceServer will
// result in compilation errors.
type UnsafeMyServiceServer interface {
	mustEmbedUnimplementedMyServiceServer()
}

func RegisterMyServiceServer(s grpc.ServiceRegistrar, srv MyServiceServer) {
	s.RegisterService(&MyService_ServiceDesc, srv)
}

func _MyService_EmptyVoid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).EmptyVoid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/EmptyVoid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).EmptyVoid(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_UnaryType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).UnaryType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/UnaryType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).UnaryType(ctx, req.(*MyType))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_UnaryEnum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyEnumValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).UnaryEnum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/UnaryEnum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).UnaryEnum(ctx, req.(*MyEnumValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_UnaryAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).UnaryAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/UnaryAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).UnaryAlias(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_UnaryString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).UnaryString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/UnaryString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).UnaryString(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_UnaryI64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).UnaryI64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/UnaryI64",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).UnaryI64(ctx, req.(*wrapperspb.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_UnaryI32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).UnaryI32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/UnaryI32",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).UnaryI32(ctx, req.(*wrapperspb.Int32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_UnaryI16_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).UnaryI16(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/UnaryI16",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).UnaryI16(ctx, req.(*wrapperspb.Int32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_UnaryI8_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).UnaryI8(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/UnaryI8",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).UnaryI8(ctx, req.(*wrapperspb.Int32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_UnaryU64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).UnaryU64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/UnaryU64",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).UnaryU64(ctx, req.(*wrapperspb.UInt64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_UnaryU32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).UnaryU32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/UnaryU32",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).UnaryU32(ctx, req.(*wrapperspb.UInt32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_UnaryU16_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).UnaryU16(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/UnaryU16",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).UnaryU16(ctx, req.(*wrapperspb.UInt32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_UnaryU8_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).UnaryU8(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/UnaryU8",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).UnaryU8(ctx, req.(*wrapperspb.UInt32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_UnaryF64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.DoubleValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).UnaryF64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/UnaryF64",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).UnaryF64(ctx, req.(*wrapperspb.DoubleValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_UnaryF32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.FloatValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).UnaryF32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/UnaryF32",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).UnaryF32(ctx, req.(*wrapperspb.FloatValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_UnaryBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.BytesValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).UnaryBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/UnaryBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).UnaryBytes(ctx, req.(*wrapperspb.BytesValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_FuncType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyServiceFuncTypeArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).FuncType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/FuncType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).FuncType(ctx, req.(*MyServiceFuncTypeArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_FuncEnum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyServiceFuncEnumArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).FuncEnum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/FuncEnum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).FuncEnum(ctx, req.(*MyServiceFuncEnumArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_FuncAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyServiceFuncAliasArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).FuncAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/FuncAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).FuncAlias(ctx, req.(*MyServiceFuncAliasArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_FuncString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyServiceFuncStringArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).FuncString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/FuncString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).FuncString(ctx, req.(*MyServiceFuncStringArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_FuncI64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyServiceFuncI64Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).FuncI64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/FuncI64",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).FuncI64(ctx, req.(*MyServiceFuncI64Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_FuncI32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyServiceFuncI32Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).FuncI32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/FuncI32",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).FuncI32(ctx, req.(*MyServiceFuncI32Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_FuncI16_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyServiceFuncI16Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).FuncI16(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/FuncI16",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).FuncI16(ctx, req.(*MyServiceFuncI16Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_FuncI8_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyServiceFuncI8Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).FuncI8(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/FuncI8",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).FuncI8(ctx, req.(*MyServiceFuncI8Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_FuncU64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyServiceFuncU64Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).FuncU64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/FuncU64",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).FuncU64(ctx, req.(*MyServiceFuncU64Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_FuncU32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyServiceFuncU32Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).FuncU32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/FuncU32",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).FuncU32(ctx, req.(*MyServiceFuncU32Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_FuncU16_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyServiceFuncU16Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).FuncU16(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/FuncU16",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).FuncU16(ctx, req.(*MyServiceFuncU16Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_FuncU8_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyServiceFuncU8Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).FuncU8(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/FuncU8",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).FuncU8(ctx, req.(*MyServiceFuncU8Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_FuncF64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyServiceFuncF64Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).FuncF64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/FuncF64",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).FuncF64(ctx, req.(*MyServiceFuncF64Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_FuncF32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyServiceFuncF32Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).FuncF32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/FuncF32",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).FuncF32(ctx, req.(*MyServiceFuncF32Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_FuncBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyServiceFuncBytesArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).FuncBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apex.testing.MyService/FuncBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).FuncBytes(ctx, req.(*MyServiceFuncBytesArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// MyService_ServiceDesc is the grpc.ServiceDesc for MyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apex.testing.MyService",
	HandlerType: (*MyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EmptyVoid",
			Handler:    _MyService_EmptyVoid_Handler,
		},
		{
			MethodName: "UnaryType",
			Handler:    _MyService_UnaryType_Handler,
		},
		{
			MethodName: "UnaryEnum",
			Handler:    _MyService_UnaryEnum_Handler,
		},
		{
			MethodName: "UnaryAlias",
			Handler:    _MyService_UnaryAlias_Handler,
		},
		{
			MethodName: "UnaryString",
			Handler:    _MyService_UnaryString_Handler,
		},
		{
			MethodName: "UnaryI64",
			Handler:    _MyService_UnaryI64_Handler,
		},
		{
			MethodName: "UnaryI32",
			Handler:    _MyService_UnaryI32_Handler,
		},
		{
			MethodName: "UnaryI16",
			Handler:    _MyService_UnaryI16_Handler,
		},
		{
			MethodName: "UnaryI8",
			Handler:    _MyService_UnaryI8_Handler,
		},
		{
			MethodName: "UnaryU64",
			Handler:    _MyService_UnaryU64_Handler,
		},
		{
			MethodName: "UnaryU32",
			Handler:    _MyService_UnaryU32_Handler,
		},
		{
			MethodName: "UnaryU16",
			Handler:    _MyService_UnaryU16_Handler,
		},
		{
			MethodName: "UnaryU8",
			Handler:    _MyService_UnaryU8_Handler,
		},
		{
			MethodName: "UnaryF64",
			Handler:    _MyService_UnaryF64_Handler,
		},
		{
			MethodName: "UnaryF32",
			Handler:    _MyService_UnaryF32_Handler,
		},
		{
			MethodName: "UnaryBytes",
			Handler:    _MyService_UnaryBytes_Handler,
		},
		{
			MethodName: "FuncType",
			Handler:    _MyService_FuncType_Handler,
		},
		{
			MethodName: "FuncEnum",
			Handler:    _MyService_FuncEnum_Handler,
		},
		{
			MethodName: "FuncAlias",
			Handler:    _MyService_FuncAlias_Handler,
		},
		{
			MethodName: "FuncString",
			Handler:    _MyService_FuncString_Handler,
		},
		{
			MethodName: "FuncI64",
			Handler:    _MyService_FuncI64_Handler,
		},
		{
			MethodName: "FuncI32",
			Handler:    _MyService_FuncI32_Handler,
		},
		{
			MethodName: "FuncI16",
			Handler:    _MyService_FuncI16_Handler,
		},
		{
			MethodName: "FuncI8",
			Handler:    _MyService_FuncI8_Handler,
		},
		{
			MethodName: "FuncU64",
			Handler:    _MyService_FuncU64_Handler,
		},
		{
			MethodName: "FuncU32",
			Handler:    _MyService_FuncU32_Handler,
		},
		{
			MethodName: "FuncU16",
			Handler:    _MyService_FuncU16_Handler,
		},
		{
			MethodName: "FuncU8",
			Handler:    _MyService_FuncU8_Handler,
		},
		{
			MethodName: "FuncF64",
			Handler:    _MyService_FuncF64_Handler,
		},
		{
			MethodName: "FuncF32",
			Handler:    _MyService_FuncF32_Handler,
		},
		{
			MethodName: "FuncBytes",
			Handler:    _MyService_FuncBytes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
