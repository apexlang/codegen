syntax = "proto3";

package apex.testing;

option go_package = "github.com/apexlang/outputtest/proto";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

service MyService {
  rpc EmptyVoid(google.protobuf.Empty) returns (google.protobuf.Empty) {};
  rpc UnaryType(MyType) returns (MyType) {};
  rpc UnaryEnum(MyEnumValue) returns (MyEnumValue) {};
  rpc UnaryAlias(google.protobuf.StringValue) returns (google.protobuf.StringValue) {};
  rpc UnaryString(google.protobuf.StringValue) returns (google.protobuf.StringValue) {};
  rpc UnaryI64(google.protobuf.Int64Value) returns (google.protobuf.Int64Value) {};
  rpc UnaryI32(google.protobuf.Int32Value) returns (google.protobuf.Int32Value) {};
  rpc UnaryI16(google.protobuf.Int32Value) returns (google.protobuf.Int32Value) {};
  rpc UnaryI8(google.protobuf.Int32Value) returns (google.protobuf.Int32Value) {};
  rpc UnaryU64(google.protobuf.UInt64Value) returns (google.protobuf.UInt64Value) {};
  rpc UnaryU32(google.protobuf.UInt32Value) returns (google.protobuf.UInt32Value) {};
  rpc UnaryU16(google.protobuf.UInt32Value) returns (google.protobuf.UInt32Value) {};
  rpc UnaryU8(google.protobuf.UInt32Value) returns (google.protobuf.UInt32Value) {};
  rpc UnaryF64(google.protobuf.DoubleValue) returns (google.protobuf.DoubleValue) {};
  rpc UnaryF32(google.protobuf.FloatValue) returns (google.protobuf.FloatValue) {};
  rpc UnaryBytes(google.protobuf.BytesValue) returns (google.protobuf.BytesValue) {};
  rpc FuncType(MyServiceFuncTypeArgs) returns (MyType) {};
  rpc FuncEnum(MyServiceFuncEnumArgs) returns (MyEnumValue) {};
  rpc FuncAlias(MyServiceFuncAliasArgs) returns (google.protobuf.StringValue) {};
  rpc FuncString(MyServiceFuncStringArgs) returns (google.protobuf.StringValue) {};
  rpc FuncI64(MyServiceFuncI64Args) returns (google.protobuf.Int64Value) {};
  rpc FuncI32(MyServiceFuncI32Args) returns (google.protobuf.Int32Value) {};
  rpc FuncI16(MyServiceFuncI16Args) returns (google.protobuf.Int32Value) {};
  rpc FuncI8(MyServiceFuncI8Args) returns (google.protobuf.Int32Value) {};
  rpc FuncU64(MyServiceFuncU64Args) returns (google.protobuf.UInt64Value) {};
  rpc FuncU32(MyServiceFuncU32Args) returns (google.protobuf.UInt32Value) {};
  rpc FuncU16(MyServiceFuncU16Args) returns (google.protobuf.UInt32Value) {};
  rpc FuncU8(MyServiceFuncU8Args) returns (google.protobuf.UInt32Value) {};
  rpc FuncF64(MyServiceFuncF64Args) returns (google.protobuf.DoubleValue) {};
  rpc FuncF32(MyServiceFuncF32Args) returns (google.protobuf.FloatValue) {};
  rpc FuncBytes(MyServiceFuncBytesArgs) returns (google.protobuf.BytesValue) {};
}

// MyType is a class
message MyType {
  // same type value
  optional MyType same_value = 1;
  // type value
  MyOtherType type_value = 2;
  // string value
  string string_value = 3;
  // string option
  optional string string_option = 4;
  // i64 value
  int64 i64_value = 5;
  // i64 option
  optional int64 i64_option = 6;
  // i32 value
  int32 i32_value = 7;
  // i32 option
  optional int32 i32_option = 8;
  // i16 value
  int32 i16_value = 9;
  // i16 option
  optional int32 i16_option = 10;
  // i8 value
  int32 i8_value = 11;
  // i8 option
  optional int32 i8_option = 12;
  // u64 value
  uint64 u64_value = 13;
  // u64 option
  optional uint64 u64_option = 14;
  // u32 value
  uint32 u32_value = 15;
  // u32 option
  optional uint32 u32_option = 16;
  // u16 value
  uint32 u16_value = 17;
  // u16 option
  optional uint32 u16_option = 18;
  // u8 value
  uint32 u8_value = 19;
  // u8 option
  optional uint32 u8_option = 20;
  // f64 value
  double f64_value = 21;
  // f64 option
  optional double f64_option = 22;
  // f32 value
  float f32_value = 23;
  // f32 option
  optional float f32_option = 24;
  // datetime value
  google.protobuf.Timestamp datetime_value = 25;
  // datetime option
  optional google.protobuf.Timestamp datetime_option = 26;
  // bytes value
  bytes bytes_value = 27;
  // bytes option
  optional bytes bytes_option = 28;
  // map value
  map<string, int64> map_value = 29;
  // map of types
  map<string, MyType> map_of_types = 30;
  // array value
  repeated string array_value = 31;
  // array of types
  repeated MyType array_of_types = 32;
  // union value
  MyUnion union_value = 33;
  // union option
  optional MyUnion union_option = 34;
  // enum value
  MyEnum enum_value = 35;
  // enum option
  optional MyEnum enum_option = 36;
  // enum value
  string alias_value = 37;
  // enum option
  optional string alias_option = 38;
}

message MyOtherType {
  string foo = 1;
  string bar = 2;
}

message MyUnion {
  oneof value {
    MyType my_type_value = 1;
    MyEnum my_enum_value = 2;
    string string_value = 3;
  }
}

// MyEnum is an emuneration
enum MyEnum {
  // ONE value
  ONE = 0;
  // TWO value
  TWO = 1;
  // THREE value
  THREE = 2;
}

message MyEnumValue {
  MyEnum value = 1;
}

message MyServiceFuncTypeArgs {
  MyType value = 1;
  optional MyType optional = 2;
}

message MyServiceFuncEnumArgs {
  MyEnum value = 1;
  optional MyEnum optional = 2;
}

message MyServiceFuncAliasArgs {
  string value = 1;
  optional string optional = 2;
}

message MyServiceFuncStringArgs {
  string value = 1;
  optional string optional = 2;
}

message MyServiceFuncI64Args {
  int64 value = 1;
  optional int64 optional = 2;
}

message MyServiceFuncI32Args {
  int32 value = 1;
  optional int32 optional = 2;
}

message MyServiceFuncI16Args {
  int32 value = 1;
  optional int32 optional = 2;
}

message MyServiceFuncI8Args {
  int32 value = 1;
  optional int32 optional = 2;
}

message MyServiceFuncU64Args {
  uint64 value = 1;
  optional uint64 optional = 2;
}

message MyServiceFuncU32Args {
  uint32 value = 1;
  optional uint32 optional = 2;
}

message MyServiceFuncU16Args {
  uint32 value = 1;
  optional uint32 optional = 2;
}

message MyServiceFuncU8Args {
  uint32 value = 1;
  optional uint32 optional = 2;
}

message MyServiceFuncF64Args {
  double value = 1;
  optional double optional = 2;
}

message MyServiceFuncF32Args {
  float value = 1;
  optional float optional = 2;
}

message MyServiceFuncBytesArgs {
  bytes value = 1;
  optional bytes optional = 2;
}

