// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: proto/service.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MyEnum is an emuneration
type MyEnum int32

const (
	// ONE value
	MyEnum_ONE MyEnum = 0
	// TWO value
	MyEnum_TWO MyEnum = 1
	// THREE value
	MyEnum_THREE MyEnum = 2
)

// Enum value maps for MyEnum.
var (
	MyEnum_name = map[int32]string{
		0: "ONE",
		1: "TWO",
		2: "THREE",
	}
	MyEnum_value = map[string]int32{
		"ONE":   0,
		"TWO":   1,
		"THREE": 2,
	}
)

func (x MyEnum) Enum() *MyEnum {
	p := new(MyEnum)
	*p = x
	return p
}

func (x MyEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MyEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_service_proto_enumTypes[0].Descriptor()
}

func (MyEnum) Type() protoreflect.EnumType {
	return &file_proto_service_proto_enumTypes[0]
}

func (x MyEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MyEnum.Descriptor instead.
func (MyEnum) EnumDescriptor() ([]byte, []int) {
	return file_proto_service_proto_rawDescGZIP(), []int{0}
}

// MyType is a class
type MyType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// same type value
	SameValue *MyType `protobuf:"bytes,1,opt,name=same_value,json=sameValue,proto3,oneof" json:"same_value,omitempty"`
	// type value
	TypeValue *MyOtherType `protobuf:"bytes,2,opt,name=type_value,json=typeValue,proto3" json:"type_value,omitempty"`
	// string value
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	// string option
	StringOption *string `protobuf:"bytes,4,opt,name=string_option,json=stringOption,proto3,oneof" json:"string_option,omitempty"`
	// i64 value
	I64Value int64 `protobuf:"varint,5,opt,name=i64_value,json=i64Value,proto3" json:"i64_value,omitempty"`
	// i64 option
	I64Option *int64 `protobuf:"varint,6,opt,name=i64_option,json=i64Option,proto3,oneof" json:"i64_option,omitempty"`
	// i32 value
	I32Value int32 `protobuf:"varint,7,opt,name=i32_value,json=i32Value,proto3" json:"i32_value,omitempty"`
	// i32 option
	I32Option *int32 `protobuf:"varint,8,opt,name=i32_option,json=i32Option,proto3,oneof" json:"i32_option,omitempty"`
	// i16 value
	I16Value int32 `protobuf:"varint,9,opt,name=i16_value,json=i16Value,proto3" json:"i16_value,omitempty"`
	// i16 option
	I16Option *int32 `protobuf:"varint,10,opt,name=i16_option,json=i16Option,proto3,oneof" json:"i16_option,omitempty"`
	// i8 value
	I8Value int32 `protobuf:"varint,11,opt,name=i8_value,json=i8Value,proto3" json:"i8_value,omitempty"`
	// i8 option
	I8Option *int32 `protobuf:"varint,12,opt,name=i8_option,json=i8Option,proto3,oneof" json:"i8_option,omitempty"`
	// u64 value
	U64Value uint64 `protobuf:"varint,13,opt,name=u64_value,json=u64Value,proto3" json:"u64_value,omitempty"`
	// u64 option
	U64Option *uint64 `protobuf:"varint,14,opt,name=u64_option,json=u64Option,proto3,oneof" json:"u64_option,omitempty"`
	// u32 value
	U32Value uint32 `protobuf:"varint,15,opt,name=u32_value,json=u32Value,proto3" json:"u32_value,omitempty"`
	// u32 option
	U32Option *uint32 `protobuf:"varint,16,opt,name=u32_option,json=u32Option,proto3,oneof" json:"u32_option,omitempty"`
	// u16 value
	U16Value uint32 `protobuf:"varint,17,opt,name=u16_value,json=u16Value,proto3" json:"u16_value,omitempty"`
	// u16 option
	U16Option *uint32 `protobuf:"varint,18,opt,name=u16_option,json=u16Option,proto3,oneof" json:"u16_option,omitempty"`
	// u8 value
	U8Value uint32 `protobuf:"varint,19,opt,name=u8_value,json=u8Value,proto3" json:"u8_value,omitempty"`
	// u8 option
	U8Option *uint32 `protobuf:"varint,20,opt,name=u8_option,json=u8Option,proto3,oneof" json:"u8_option,omitempty"`
	// f64 value
	F64Value float64 `protobuf:"fixed64,21,opt,name=f64_value,json=f64Value,proto3" json:"f64_value,omitempty"`
	// f64 option
	F64Option *float64 `protobuf:"fixed64,22,opt,name=f64_option,json=f64Option,proto3,oneof" json:"f64_option,omitempty"`
	// f32 value
	F32Value float32 `protobuf:"fixed32,23,opt,name=f32_value,json=f32Value,proto3" json:"f32_value,omitempty"`
	// f32 option
	F32Option *float32 `protobuf:"fixed32,24,opt,name=f32_option,json=f32Option,proto3,oneof" json:"f32_option,omitempty"`
	// datetime value
	DatetimeValue *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=datetime_value,json=datetimeValue,proto3" json:"datetime_value,omitempty"`
	// datetime option
	DatetimeOption *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=datetime_option,json=datetimeOption,proto3,oneof" json:"datetime_option,omitempty"`
	// bytes value
	BytesValue []byte `protobuf:"bytes,27,opt,name=bytes_value,json=bytesValue,proto3" json:"bytes_value,omitempty"`
	// bytes option
	BytesOption []byte `protobuf:"bytes,28,opt,name=bytes_option,json=bytesOption,proto3,oneof" json:"bytes_option,omitempty"`
	// map value
	MapValue map[string]int64 `protobuf:"bytes,29,rep,name=map_value,json=mapValue,proto3" json:"map_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// map of types
	MapOfTypes map[string]*MyType `protobuf:"bytes,30,rep,name=map_of_types,json=mapOfTypes,proto3" json:"map_of_types,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// array value
	ArrayValue []string `protobuf:"bytes,31,rep,name=array_value,json=arrayValue,proto3" json:"array_value,omitempty"`
	// array of types
	ArrayOfTypes []*MyType `protobuf:"bytes,32,rep,name=array_of_types,json=arrayOfTypes,proto3" json:"array_of_types,omitempty"`
	// union value
	UnionValue *MyUnion `protobuf:"bytes,33,opt,name=union_value,json=unionValue,proto3" json:"union_value,omitempty"`
	// union option
	UnionOption *MyUnion `protobuf:"bytes,34,opt,name=union_option,json=unionOption,proto3,oneof" json:"union_option,omitempty"`
	// enum value
	EnumValue MyEnum `protobuf:"varint,35,opt,name=enum_value,json=enumValue,proto3,enum=apex.testing.MyEnum" json:"enum_value,omitempty"`
	// enum option
	EnumOption *MyEnum `protobuf:"varint,36,opt,name=enum_option,json=enumOption,proto3,enum=apex.testing.MyEnum,oneof" json:"enum_option,omitempty"`
	// enum value
	AliasValue string `protobuf:"bytes,37,opt,name=alias_value,json=aliasValue,proto3" json:"alias_value,omitempty"`
	// enum option
	AliasOption *string `protobuf:"bytes,38,opt,name=alias_option,json=aliasOption,proto3,oneof" json:"alias_option,omitempty"`
}

func (x *MyType) Reset() {
	*x = MyType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyType) ProtoMessage() {}

func (x *MyType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyType.ProtoReflect.Descriptor instead.
func (*MyType) Descriptor() ([]byte, []int) {
	return file_proto_service_proto_rawDescGZIP(), []int{0}
}

func (x *MyType) GetSameValue() *MyType {
	if x != nil {
		return x.SameValue
	}
	return nil
}

func (x *MyType) GetTypeValue() *MyOtherType {
	if x != nil {
		return x.TypeValue
	}
	return nil
}

func (x *MyType) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *MyType) GetStringOption() string {
	if x != nil && x.StringOption != nil {
		return *x.StringOption
	}
	return ""
}

func (x *MyType) GetI64Value() int64 {
	if x != nil {
		return x.I64Value
	}
	return 0
}

func (x *MyType) GetI64Option() int64 {
	if x != nil && x.I64Option != nil {
		return *x.I64Option
	}
	return 0
}

func (x *MyType) GetI32Value() int32 {
	if x != nil {
		return x.I32Value
	}
	return 0
}

func (x *MyType) GetI32Option() int32 {
	if x != nil && x.I32Option != nil {
		return *x.I32Option
	}
	return 0
}

func (x *MyType) GetI16Value() int32 {
	if x != nil {
		return x.I16Value
	}
	return 0
}

func (x *MyType) GetI16Option() int32 {
	if x != nil && x.I16Option != nil {
		return *x.I16Option
	}
	return 0
}

func (x *MyType) GetI8Value() int32 {
	if x != nil {
		return x.I8Value
	}
	return 0
}

func (x *MyType) GetI8Option() int32 {
	if x != nil && x.I8Option != nil {
		return *x.I8Option
	}
	return 0
}

func (x *MyType) GetU64Value() uint64 {
	if x != nil {
		return x.U64Value
	}
	return 0
}

func (x *MyType) GetU64Option() uint64 {
	if x != nil && x.U64Option != nil {
		return *x.U64Option
	}
	return 0
}

func (x *MyType) GetU32Value() uint32 {
	if x != nil {
		return x.U32Value
	}
	return 0
}

func (x *MyType) GetU32Option() uint32 {
	if x != nil && x.U32Option != nil {
		return *x.U32Option
	}
	return 0
}

func (x *MyType) GetU16Value() uint32 {
	if x != nil {
		return x.U16Value
	}
	return 0
}

func (x *MyType) GetU16Option() uint32 {
	if x != nil && x.U16Option != nil {
		return *x.U16Option
	}
	return 0
}

func (x *MyType) GetU8Value() uint32 {
	if x != nil {
		return x.U8Value
	}
	return 0
}

func (x *MyType) GetU8Option() uint32 {
	if x != nil && x.U8Option != nil {
		return *x.U8Option
	}
	return 0
}

func (x *MyType) GetF64Value() float64 {
	if x != nil {
		return x.F64Value
	}
	return 0
}

func (x *MyType) GetF64Option() float64 {
	if x != nil && x.F64Option != nil {
		return *x.F64Option
	}
	return 0
}

func (x *MyType) GetF32Value() float32 {
	if x != nil {
		return x.F32Value
	}
	return 0
}

func (x *MyType) GetF32Option() float32 {
	if x != nil && x.F32Option != nil {
		return *x.F32Option
	}
	return 0
}

func (x *MyType) GetDatetimeValue() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeValue
	}
	return nil
}

func (x *MyType) GetDatetimeOption() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeOption
	}
	return nil
}

func (x *MyType) GetBytesValue() []byte {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

func (x *MyType) GetBytesOption() []byte {
	if x != nil {
		return x.BytesOption
	}
	return nil
}

func (x *MyType) GetMapValue() map[string]int64 {
	if x != nil {
		return x.MapValue
	}
	return nil
}

func (x *MyType) GetMapOfTypes() map[string]*MyType {
	if x != nil {
		return x.MapOfTypes
	}
	return nil
}

func (x *MyType) GetArrayValue() []string {
	if x != nil {
		return x.ArrayValue
	}
	return nil
}

func (x *MyType) GetArrayOfTypes() []*MyType {
	if x != nil {
		return x.ArrayOfTypes
	}
	return nil
}

func (x *MyType) GetUnionValue() *MyUnion {
	if x != nil {
		return x.UnionValue
	}
	return nil
}

func (x *MyType) GetUnionOption() *MyUnion {
	if x != nil {
		return x.UnionOption
	}
	return nil
}

func (x *MyType) GetEnumValue() MyEnum {
	if x != nil {
		return x.EnumValue
	}
	return MyEnum_ONE
}

func (x *MyType) GetEnumOption() MyEnum {
	if x != nil && x.EnumOption != nil {
		return *x.EnumOption
	}
	return MyEnum_ONE
}

func (x *MyType) GetAliasValue() string {
	if x != nil {
		return x.AliasValue
	}
	return ""
}

func (x *MyType) GetAliasOption() string {
	if x != nil && x.AliasOption != nil {
		return *x.AliasOption
	}
	return ""
}

type MyOtherType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Foo string `protobuf:"bytes,1,opt,name=foo,proto3" json:"foo,omitempty"`
	Bar string `protobuf:"bytes,2,opt,name=bar,proto3" json:"bar,omitempty"`
}

func (x *MyOtherType) Reset() {
	*x = MyOtherType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyOtherType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyOtherType) ProtoMessage() {}

func (x *MyOtherType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyOtherType.ProtoReflect.Descriptor instead.
func (*MyOtherType) Descriptor() ([]byte, []int) {
	return file_proto_service_proto_rawDescGZIP(), []int{1}
}

func (x *MyOtherType) GetFoo() string {
	if x != nil {
		return x.Foo
	}
	return ""
}

func (x *MyOtherType) GetBar() string {
	if x != nil {
		return x.Bar
	}
	return ""
}

type MyUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*MyUnion_MyTypeValue
	//	*MyUnion_MyEnumValue
	//	*MyUnion_StringValue
	Value isMyUnion_Value `protobuf_oneof:"value"`
}

func (x *MyUnion) Reset() {
	*x = MyUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyUnion) ProtoMessage() {}

func (x *MyUnion) ProtoReflect() protoreflect.Message {
	mi := &file_proto_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyUnion.ProtoReflect.Descriptor instead.
func (*MyUnion) Descriptor() ([]byte, []int) {
	return file_proto_service_proto_rawDescGZIP(), []int{2}
}

func (m *MyUnion) GetValue() isMyUnion_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *MyUnion) GetMyTypeValue() *MyType {
	if x, ok := x.GetValue().(*MyUnion_MyTypeValue); ok {
		return x.MyTypeValue
	}
	return nil
}

func (x *MyUnion) GetMyEnumValue() MyEnum {
	if x, ok := x.GetValue().(*MyUnion_MyEnumValue); ok {
		return x.MyEnumValue
	}
	return MyEnum_ONE
}

func (x *MyUnion) GetStringValue() string {
	if x, ok := x.GetValue().(*MyUnion_StringValue); ok {
		return x.StringValue
	}
	return ""
}

type isMyUnion_Value interface {
	isMyUnion_Value()
}

type MyUnion_MyTypeValue struct {
	MyTypeValue *MyType `protobuf:"bytes,1,opt,name=my_type_value,json=myTypeValue,proto3,oneof"`
}

type MyUnion_MyEnumValue struct {
	MyEnumValue MyEnum `protobuf:"varint,2,opt,name=my_enum_value,json=myEnumValue,proto3,enum=apex.testing.MyEnum,oneof"`
}

type MyUnion_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3,oneof"`
}

func (*MyUnion_MyTypeValue) isMyUnion_Value() {}

func (*MyUnion_MyEnumValue) isMyUnion_Value() {}

func (*MyUnion_StringValue) isMyUnion_Value() {}

type MyEnumValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value MyEnum `protobuf:"varint,1,opt,name=value,proto3,enum=apex.testing.MyEnum" json:"value,omitempty"`
}

func (x *MyEnumValue) Reset() {
	*x = MyEnumValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyEnumValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyEnumValue) ProtoMessage() {}

func (x *MyEnumValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyEnumValue.ProtoReflect.Descriptor instead.
func (*MyEnumValue) Descriptor() ([]byte, []int) {
	return file_proto_service_proto_rawDescGZIP(), []int{3}
}

func (x *MyEnumValue) GetValue() MyEnum {
	if x != nil {
		return x.Value
	}
	return MyEnum_ONE
}

type MyServiceFuncTypeArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    *MyType `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Optional *MyType `protobuf:"bytes,2,opt,name=optional,proto3,oneof" json:"optional,omitempty"`
}

func (x *MyServiceFuncTypeArgs) Reset() {
	*x = MyServiceFuncTypeArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyServiceFuncTypeArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyServiceFuncTypeArgs) ProtoMessage() {}

func (x *MyServiceFuncTypeArgs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyServiceFuncTypeArgs.ProtoReflect.Descriptor instead.
func (*MyServiceFuncTypeArgs) Descriptor() ([]byte, []int) {
	return file_proto_service_proto_rawDescGZIP(), []int{4}
}

func (x *MyServiceFuncTypeArgs) GetValue() *MyType {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *MyServiceFuncTypeArgs) GetOptional() *MyType {
	if x != nil {
		return x.Optional
	}
	return nil
}

type MyServiceFuncEnumArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    MyEnum  `protobuf:"varint,1,opt,name=value,proto3,enum=apex.testing.MyEnum" json:"value,omitempty"`
	Optional *MyEnum `protobuf:"varint,2,opt,name=optional,proto3,enum=apex.testing.MyEnum,oneof" json:"optional,omitempty"`
}

func (x *MyServiceFuncEnumArgs) Reset() {
	*x = MyServiceFuncEnumArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyServiceFuncEnumArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyServiceFuncEnumArgs) ProtoMessage() {}

func (x *MyServiceFuncEnumArgs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyServiceFuncEnumArgs.ProtoReflect.Descriptor instead.
func (*MyServiceFuncEnumArgs) Descriptor() ([]byte, []int) {
	return file_proto_service_proto_rawDescGZIP(), []int{5}
}

func (x *MyServiceFuncEnumArgs) GetValue() MyEnum {
	if x != nil {
		return x.Value
	}
	return MyEnum_ONE
}

func (x *MyServiceFuncEnumArgs) GetOptional() MyEnum {
	if x != nil && x.Optional != nil {
		return *x.Optional
	}
	return MyEnum_ONE
}

type MyServiceFuncAliasArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    string  `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Optional *string `protobuf:"bytes,2,opt,name=optional,proto3,oneof" json:"optional,omitempty"`
}

func (x *MyServiceFuncAliasArgs) Reset() {
	*x = MyServiceFuncAliasArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyServiceFuncAliasArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyServiceFuncAliasArgs) ProtoMessage() {}

func (x *MyServiceFuncAliasArgs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyServiceFuncAliasArgs.ProtoReflect.Descriptor instead.
func (*MyServiceFuncAliasArgs) Descriptor() ([]byte, []int) {
	return file_proto_service_proto_rawDescGZIP(), []int{6}
}

func (x *MyServiceFuncAliasArgs) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *MyServiceFuncAliasArgs) GetOptional() string {
	if x != nil && x.Optional != nil {
		return *x.Optional
	}
	return ""
}

type MyServiceFuncStringArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    string  `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Optional *string `protobuf:"bytes,2,opt,name=optional,proto3,oneof" json:"optional,omitempty"`
}

func (x *MyServiceFuncStringArgs) Reset() {
	*x = MyServiceFuncStringArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyServiceFuncStringArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyServiceFuncStringArgs) ProtoMessage() {}

func (x *MyServiceFuncStringArgs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyServiceFuncStringArgs.ProtoReflect.Descriptor instead.
func (*MyServiceFuncStringArgs) Descriptor() ([]byte, []int) {
	return file_proto_service_proto_rawDescGZIP(), []int{7}
}

func (x *MyServiceFuncStringArgs) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *MyServiceFuncStringArgs) GetOptional() string {
	if x != nil && x.Optional != nil {
		return *x.Optional
	}
	return ""
}

type MyServiceFuncI64Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    int64  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Optional *int64 `protobuf:"varint,2,opt,name=optional,proto3,oneof" json:"optional,omitempty"`
}

func (x *MyServiceFuncI64Args) Reset() {
	*x = MyServiceFuncI64Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyServiceFuncI64Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyServiceFuncI64Args) ProtoMessage() {}

func (x *MyServiceFuncI64Args) ProtoReflect() protoreflect.Message {
	mi := &file_proto_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyServiceFuncI64Args.ProtoReflect.Descriptor instead.
func (*MyServiceFuncI64Args) Descriptor() ([]byte, []int) {
	return file_proto_service_proto_rawDescGZIP(), []int{8}
}

func (x *MyServiceFuncI64Args) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MyServiceFuncI64Args) GetOptional() int64 {
	if x != nil && x.Optional != nil {
		return *x.Optional
	}
	return 0
}

type MyServiceFuncI32Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    int32  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Optional *int32 `protobuf:"varint,2,opt,name=optional,proto3,oneof" json:"optional,omitempty"`
}

func (x *MyServiceFuncI32Args) Reset() {
	*x = MyServiceFuncI32Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyServiceFuncI32Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyServiceFuncI32Args) ProtoMessage() {}

func (x *MyServiceFuncI32Args) ProtoReflect() protoreflect.Message {
	mi := &file_proto_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyServiceFuncI32Args.ProtoReflect.Descriptor instead.
func (*MyServiceFuncI32Args) Descriptor() ([]byte, []int) {
	return file_proto_service_proto_rawDescGZIP(), []int{9}
}

func (x *MyServiceFuncI32Args) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MyServiceFuncI32Args) GetOptional() int32 {
	if x != nil && x.Optional != nil {
		return *x.Optional
	}
	return 0
}

type MyServiceFuncI16Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    int32  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Optional *int32 `protobuf:"varint,2,opt,name=optional,proto3,oneof" json:"optional,omitempty"`
}

func (x *MyServiceFuncI16Args) Reset() {
	*x = MyServiceFuncI16Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyServiceFuncI16Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyServiceFuncI16Args) ProtoMessage() {}

func (x *MyServiceFuncI16Args) ProtoReflect() protoreflect.Message {
	mi := &file_proto_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyServiceFuncI16Args.ProtoReflect.Descriptor instead.
func (*MyServiceFuncI16Args) Descriptor() ([]byte, []int) {
	return file_proto_service_proto_rawDescGZIP(), []int{10}
}

func (x *MyServiceFuncI16Args) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MyServiceFuncI16Args) GetOptional() int32 {
	if x != nil && x.Optional != nil {
		return *x.Optional
	}
	return 0
}

type MyServiceFuncI8Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    int32  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Optional *int32 `protobuf:"varint,2,opt,name=optional,proto3,oneof" json:"optional,omitempty"`
}

func (x *MyServiceFuncI8Args) Reset() {
	*x = MyServiceFuncI8Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyServiceFuncI8Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyServiceFuncI8Args) ProtoMessage() {}

func (x *MyServiceFuncI8Args) ProtoReflect() protoreflect.Message {
	mi := &file_proto_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyServiceFuncI8Args.ProtoReflect.Descriptor instead.
func (*MyServiceFuncI8Args) Descriptor() ([]byte, []int) {
	return file_proto_service_proto_rawDescGZIP(), []int{11}
}

func (x *MyServiceFuncI8Args) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MyServiceFuncI8Args) GetOptional() int32 {
	if x != nil && x.Optional != nil {
		return *x.Optional
	}
	return 0
}

type MyServiceFuncU64Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    uint64  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Optional *uint64 `protobuf:"varint,2,opt,name=optional,proto3,oneof" json:"optional,omitempty"`
}

func (x *MyServiceFuncU64Args) Reset() {
	*x = MyServiceFuncU64Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyServiceFuncU64Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyServiceFuncU64Args) ProtoMessage() {}

func (x *MyServiceFuncU64Args) ProtoReflect() protoreflect.Message {
	mi := &file_proto_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyServiceFuncU64Args.ProtoReflect.Descriptor instead.
func (*MyServiceFuncU64Args) Descriptor() ([]byte, []int) {
	return file_proto_service_proto_rawDescGZIP(), []int{12}
}

func (x *MyServiceFuncU64Args) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MyServiceFuncU64Args) GetOptional() uint64 {
	if x != nil && x.Optional != nil {
		return *x.Optional
	}
	return 0
}

type MyServiceFuncU32Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    uint32  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Optional *uint32 `protobuf:"varint,2,opt,name=optional,proto3,oneof" json:"optional,omitempty"`
}

func (x *MyServiceFuncU32Args) Reset() {
	*x = MyServiceFuncU32Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyServiceFuncU32Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyServiceFuncU32Args) ProtoMessage() {}

func (x *MyServiceFuncU32Args) ProtoReflect() protoreflect.Message {
	mi := &file_proto_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyServiceFuncU32Args.ProtoReflect.Descriptor instead.
func (*MyServiceFuncU32Args) Descriptor() ([]byte, []int) {
	return file_proto_service_proto_rawDescGZIP(), []int{13}
}

func (x *MyServiceFuncU32Args) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MyServiceFuncU32Args) GetOptional() uint32 {
	if x != nil && x.Optional != nil {
		return *x.Optional
	}
	return 0
}

type MyServiceFuncU16Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    uint32  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Optional *uint32 `protobuf:"varint,2,opt,name=optional,proto3,oneof" json:"optional,omitempty"`
}

func (x *MyServiceFuncU16Args) Reset() {
	*x = MyServiceFuncU16Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyServiceFuncU16Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyServiceFuncU16Args) ProtoMessage() {}

func (x *MyServiceFuncU16Args) ProtoReflect() protoreflect.Message {
	mi := &file_proto_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyServiceFuncU16Args.ProtoReflect.Descriptor instead.
func (*MyServiceFuncU16Args) Descriptor() ([]byte, []int) {
	return file_proto_service_proto_rawDescGZIP(), []int{14}
}

func (x *MyServiceFuncU16Args) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MyServiceFuncU16Args) GetOptional() uint32 {
	if x != nil && x.Optional != nil {
		return *x.Optional
	}
	return 0
}

type MyServiceFuncU8Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    uint32  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Optional *uint32 `protobuf:"varint,2,opt,name=optional,proto3,oneof" json:"optional,omitempty"`
}

func (x *MyServiceFuncU8Args) Reset() {
	*x = MyServiceFuncU8Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyServiceFuncU8Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyServiceFuncU8Args) ProtoMessage() {}

func (x *MyServiceFuncU8Args) ProtoReflect() protoreflect.Message {
	mi := &file_proto_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyServiceFuncU8Args.ProtoReflect.Descriptor instead.
func (*MyServiceFuncU8Args) Descriptor() ([]byte, []int) {
	return file_proto_service_proto_rawDescGZIP(), []int{15}
}

func (x *MyServiceFuncU8Args) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MyServiceFuncU8Args) GetOptional() uint32 {
	if x != nil && x.Optional != nil {
		return *x.Optional
	}
	return 0
}

type MyServiceFuncF64Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    float64  `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Optional *float64 `protobuf:"fixed64,2,opt,name=optional,proto3,oneof" json:"optional,omitempty"`
}

func (x *MyServiceFuncF64Args) Reset() {
	*x = MyServiceFuncF64Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyServiceFuncF64Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyServiceFuncF64Args) ProtoMessage() {}

func (x *MyServiceFuncF64Args) ProtoReflect() protoreflect.Message {
	mi := &file_proto_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyServiceFuncF64Args.ProtoReflect.Descriptor instead.
func (*MyServiceFuncF64Args) Descriptor() ([]byte, []int) {
	return file_proto_service_proto_rawDescGZIP(), []int{16}
}

func (x *MyServiceFuncF64Args) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MyServiceFuncF64Args) GetOptional() float64 {
	if x != nil && x.Optional != nil {
		return *x.Optional
	}
	return 0
}

type MyServiceFuncF32Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    float32  `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
	Optional *float32 `protobuf:"fixed32,2,opt,name=optional,proto3,oneof" json:"optional,omitempty"`
}

func (x *MyServiceFuncF32Args) Reset() {
	*x = MyServiceFuncF32Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyServiceFuncF32Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyServiceFuncF32Args) ProtoMessage() {}

func (x *MyServiceFuncF32Args) ProtoReflect() protoreflect.Message {
	mi := &file_proto_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyServiceFuncF32Args.ProtoReflect.Descriptor instead.
func (*MyServiceFuncF32Args) Descriptor() ([]byte, []int) {
	return file_proto_service_proto_rawDescGZIP(), []int{17}
}

func (x *MyServiceFuncF32Args) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MyServiceFuncF32Args) GetOptional() float32 {
	if x != nil && x.Optional != nil {
		return *x.Optional
	}
	return 0
}

type MyServiceFuncBytesArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Optional []byte `protobuf:"bytes,2,opt,name=optional,proto3,oneof" json:"optional,omitempty"`
}

func (x *MyServiceFuncBytesArgs) Reset() {
	*x = MyServiceFuncBytesArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyServiceFuncBytesArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyServiceFuncBytesArgs) ProtoMessage() {}

func (x *MyServiceFuncBytesArgs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyServiceFuncBytesArgs.ProtoReflect.Descriptor instead.
func (*MyServiceFuncBytesArgs) Descriptor() ([]byte, []int) {
	return file_proto_service_proto_rawDescGZIP(), []int{18}
}

func (x *MyServiceFuncBytesArgs) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *MyServiceFuncBytesArgs) GetOptional() []byte {
	if x != nil {
		return x.Optional
	}
	return nil
}

var File_proto_service_proto protoreflect.FileDescriptor

var file_proto_service_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x70, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd6, 0x0f, 0x0a, 0x06, 0x4d, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0a,
	0x73, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x61, 0x6d, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x65,
	0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x69, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x36,
	0x34, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02,
	0x52, 0x09, 0x69, 0x36, 0x34, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x69, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x69,
	0x33, 0x32, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x03, 0x52, 0x09, 0x69, 0x33, 0x32, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x31, 0x36, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x69, 0x31, 0x36, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0a,
	0x69, 0x31, 0x36, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x04, 0x52, 0x09, 0x69, 0x31, 0x36, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x38, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x69, 0x38, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x69,
	0x38, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05,
	0x52, 0x08, 0x69, 0x38, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x75, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x36,
	0x34, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x48, 0x06,
	0x52, 0x09, 0x75, 0x36, 0x34, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x75, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x75,
	0x33, 0x32, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x07, 0x52, 0x09, 0x75, 0x33, 0x32, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x31, 0x36, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x75, 0x31, 0x36, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0a,
	0x75, 0x31, 0x36, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x08, 0x52, 0x09, 0x75, 0x31, 0x36, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x08, 0x75, 0x38, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x75, 0x38, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x75,
	0x38, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09,
	0x52, 0x08, 0x75, 0x38, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x66, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x36,
	0x34, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0a,
	0x52, 0x09, 0x66, 0x36, 0x34, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x66, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x66,
	0x33, 0x32, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x0b, 0x52, 0x09, 0x66, 0x33, 0x32, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x0c, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a,
	0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x0d, 0x52, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d,
	0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x61,
	0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x5f, 0x6f, 0x66,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x3a, 0x0a, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x75,
	0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x79, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x65, 0x78,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x55, 0x6e, 0x69, 0x6f, 0x6e,
	0x48, 0x0e, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x65, 0x6e,
	0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61,
	0x70, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x45, 0x6e,
	0x75, 0x6d, 0x48, 0x0f, 0x52, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0b, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0f, 0x4d, 0x61, 0x70,
	0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x70, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x36, 0x34, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x69, 0x33, 0x32, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x69, 0x31, 0x36, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x69, 0x38, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75,
	0x36, 0x34, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x33,
	0x32, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x31, 0x36,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x38, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x36, 0x34, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x33, 0x32, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x6e, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x0b, 0x4d, 0x79,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x6f, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x6f, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x62,
	0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x61, 0x72, 0x22, 0xaf, 0x01,
	0x0a, 0x07, 0x4d, 0x79, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0d, 0x6d, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x6d, 0x79, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61,
	0x70, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x45, 0x6e,
	0x75, 0x6d, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x39, 0x0a, 0x0b, 0x4d, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x61, 0x70, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x15, 0x4d,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x41, 0x72, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x4d, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x87, 0x01, 0x0a, 0x15, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x45, 0x6e, 0x75, 0x6d, 0x41, 0x72, 0x67, 0x73, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x61, 0x70, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61,
	0x70, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x45, 0x6e,
	0x75, 0x6d, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x5c,
	0x0a, 0x16, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f,
	0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x5d, 0x0a, 0x17,
	0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a,
	0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x5a, 0x0a, 0x14, 0x4d,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x49, 0x36, 0x34, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x5a, 0x0a, 0x14, 0x4d, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x49, 0x33, 0x32, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x22, 0x5a, 0x0a, 0x14, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x49, 0x31, 0x36, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22,
	0x59, 0x0a, 0x13, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x49, 0x38, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x08,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x5a, 0x0a, 0x14, 0x4d, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x55, 0x36, 0x34, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x5a, 0x0a, 0x14, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x55, 0x33, 0x32, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x22, 0x5a, 0x0a, 0x14, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x55, 0x31, 0x36, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x59,
	0x0a, 0x13, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x55,
	0x38, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x5a, 0x0a, 0x14, 0x4d, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x46, 0x36, 0x34, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x5a, 0x0a, 0x14, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x46, 0x33, 0x32, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x22, 0x5c, 0x0a, 0x16, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x75,
	0x6e, 0x63, 0x42, 0x79, 0x74, 0x65, 0x73, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2a,
	0x25, 0x0a, 0x06, 0x4d, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x57, 0x4f, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54,
	0x48, 0x52, 0x45, 0x45, 0x10, 0x02, 0x32, 0xa3, 0x12, 0x0a, 0x09, 0x4d, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x56, 0x6f, 0x69,
	0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x09, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x79, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x09, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x19, 0x2e, 0x61, 0x70,
	0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x45, 0x6e, 0x75,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0a, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12,
	0x4b, 0x0a, 0x0b, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x08,
	0x55, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x36, 0x34, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x08, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x33, 0x32,
	0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x08,
	0x55, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x31, 0x36, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x07, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x38, 0x12,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x08, 0x55,
	0x6e, 0x61, 0x72, 0x79, 0x55, 0x36, 0x34, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x08, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x55, 0x33,
	0x32, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12,
	0x48, 0x0a, 0x08, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x55, 0x31, 0x36, 0x12, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x07, 0x55, 0x6e, 0x61,
	0x72, 0x79, 0x55, 0x38, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x00, 0x12, 0x48, 0x0a, 0x08, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x46, 0x36, 0x34, 0x12, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x08,
	0x55, 0x6e, 0x61, 0x72, 0x79, 0x46, 0x33, 0x32, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0a, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x47,
	0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x65,
	0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a,
	0x14, 0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x45, 0x6e, 0x75, 0x6d, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x09, 0x46, 0x75, 0x6e, 0x63, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0a, 0x46, 0x75, 0x6e, 0x63,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x07, 0x46, 0x75, 0x6e, 0x63, 0x49, 0x36, 0x34, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x49, 0x36, 0x34, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x07, 0x46,
	0x75, 0x6e, 0x63, 0x49, 0x33, 0x32, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x49, 0x33, 0x32, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x07, 0x46, 0x75, 0x6e,
	0x63, 0x49, 0x31, 0x36, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x49, 0x31, 0x36, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x06, 0x46, 0x75, 0x6e, 0x63, 0x49,
	0x38, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x49, 0x38,
	0x41, 0x72, 0x67, 0x73, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x07, 0x46, 0x75, 0x6e, 0x63, 0x55, 0x36, 0x34, 0x12, 0x22,
	0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x55, 0x36, 0x34, 0x41, 0x72,
	0x67, 0x73, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x00, 0x12, 0x4d, 0x0a, 0x07, 0x46, 0x75, 0x6e, 0x63, 0x55, 0x33, 0x32, 0x12, 0x22, 0x2e,
	0x61, 0x70, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x55, 0x33, 0x32, 0x41, 0x72, 0x67,
	0x73, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x00, 0x12, 0x4d, 0x0a, 0x07, 0x46, 0x75, 0x6e, 0x63, 0x55, 0x31, 0x36, 0x12, 0x22, 0x2e, 0x61,
	0x70, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x55, 0x31, 0x36, 0x41, 0x72, 0x67, 0x73,
	0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x06, 0x46, 0x75, 0x6e, 0x63, 0x55, 0x38, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x65,
	0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x55, 0x38, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a,
	0x07, 0x46, 0x75, 0x6e, 0x63, 0x46, 0x36, 0x34, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x46, 0x36, 0x34, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x07,
	0x46, 0x75, 0x6e, 0x63, 0x46, 0x33, 0x32, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x46, 0x33, 0x32, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x09, 0x46, 0x75,
	0x6e, 0x63, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x78, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x42, 0x79, 0x74, 0x65, 0x73, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x42, 0x26, 0x5a, 0x24,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x65, 0x78, 0x6c,
	0x61, 0x6e, 0x67, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_service_proto_rawDescOnce sync.Once
	file_proto_service_proto_rawDescData = file_proto_service_proto_rawDesc
)

func file_proto_service_proto_rawDescGZIP() []byte {
	file_proto_service_proto_rawDescOnce.Do(func() {
		file_proto_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_service_proto_rawDescData)
	})
	return file_proto_service_proto_rawDescData
}

var file_proto_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_service_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_proto_service_proto_goTypes = []interface{}{
	(MyEnum)(0),                     // 0: apex.testing.MyEnum
	(*MyType)(nil),                  // 1: apex.testing.MyType
	(*MyOtherType)(nil),             // 2: apex.testing.MyOtherType
	(*MyUnion)(nil),                 // 3: apex.testing.MyUnion
	(*MyEnumValue)(nil),             // 4: apex.testing.MyEnumValue
	(*MyServiceFuncTypeArgs)(nil),   // 5: apex.testing.MyServiceFuncTypeArgs
	(*MyServiceFuncEnumArgs)(nil),   // 6: apex.testing.MyServiceFuncEnumArgs
	(*MyServiceFuncAliasArgs)(nil),  // 7: apex.testing.MyServiceFuncAliasArgs
	(*MyServiceFuncStringArgs)(nil), // 8: apex.testing.MyServiceFuncStringArgs
	(*MyServiceFuncI64Args)(nil),    // 9: apex.testing.MyServiceFuncI64Args
	(*MyServiceFuncI32Args)(nil),    // 10: apex.testing.MyServiceFuncI32Args
	(*MyServiceFuncI16Args)(nil),    // 11: apex.testing.MyServiceFuncI16Args
	(*MyServiceFuncI8Args)(nil),     // 12: apex.testing.MyServiceFuncI8Args
	(*MyServiceFuncU64Args)(nil),    // 13: apex.testing.MyServiceFuncU64Args
	(*MyServiceFuncU32Args)(nil),    // 14: apex.testing.MyServiceFuncU32Args
	(*MyServiceFuncU16Args)(nil),    // 15: apex.testing.MyServiceFuncU16Args
	(*MyServiceFuncU8Args)(nil),     // 16: apex.testing.MyServiceFuncU8Args
	(*MyServiceFuncF64Args)(nil),    // 17: apex.testing.MyServiceFuncF64Args
	(*MyServiceFuncF32Args)(nil),    // 18: apex.testing.MyServiceFuncF32Args
	(*MyServiceFuncBytesArgs)(nil),  // 19: apex.testing.MyServiceFuncBytesArgs
	nil,                             // 20: apex.testing.MyType.MapValueEntry
	nil,                             // 21: apex.testing.MyType.MapOfTypesEntry
	(*timestamppb.Timestamp)(nil),   // 22: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),           // 23: google.protobuf.Empty
	(*wrapperspb.StringValue)(nil),  // 24: google.protobuf.StringValue
	(*wrapperspb.Int64Value)(nil),   // 25: google.protobuf.Int64Value
	(*wrapperspb.Int32Value)(nil),   // 26: google.protobuf.Int32Value
	(*wrapperspb.UInt64Value)(nil),  // 27: google.protobuf.UInt64Value
	(*wrapperspb.UInt32Value)(nil),  // 28: google.protobuf.UInt32Value
	(*wrapperspb.DoubleValue)(nil),  // 29: google.protobuf.DoubleValue
	(*wrapperspb.FloatValue)(nil),   // 30: google.protobuf.FloatValue
	(*wrapperspb.BytesValue)(nil),   // 31: google.protobuf.BytesValue
}
var file_proto_service_proto_depIdxs = []int32{
	1,  // 0: apex.testing.MyType.same_value:type_name -> apex.testing.MyType
	2,  // 1: apex.testing.MyType.type_value:type_name -> apex.testing.MyOtherType
	22, // 2: apex.testing.MyType.datetime_value:type_name -> google.protobuf.Timestamp
	22, // 3: apex.testing.MyType.datetime_option:type_name -> google.protobuf.Timestamp
	20, // 4: apex.testing.MyType.map_value:type_name -> apex.testing.MyType.MapValueEntry
	21, // 5: apex.testing.MyType.map_of_types:type_name -> apex.testing.MyType.MapOfTypesEntry
	1,  // 6: apex.testing.MyType.array_of_types:type_name -> apex.testing.MyType
	3,  // 7: apex.testing.MyType.union_value:type_name -> apex.testing.MyUnion
	3,  // 8: apex.testing.MyType.union_option:type_name -> apex.testing.MyUnion
	0,  // 9: apex.testing.MyType.enum_value:type_name -> apex.testing.MyEnum
	0,  // 10: apex.testing.MyType.enum_option:type_name -> apex.testing.MyEnum
	1,  // 11: apex.testing.MyUnion.my_type_value:type_name -> apex.testing.MyType
	0,  // 12: apex.testing.MyUnion.my_enum_value:type_name -> apex.testing.MyEnum
	0,  // 13: apex.testing.MyEnumValue.value:type_name -> apex.testing.MyEnum
	1,  // 14: apex.testing.MyServiceFuncTypeArgs.value:type_name -> apex.testing.MyType
	1,  // 15: apex.testing.MyServiceFuncTypeArgs.optional:type_name -> apex.testing.MyType
	0,  // 16: apex.testing.MyServiceFuncEnumArgs.value:type_name -> apex.testing.MyEnum
	0,  // 17: apex.testing.MyServiceFuncEnumArgs.optional:type_name -> apex.testing.MyEnum
	1,  // 18: apex.testing.MyType.MapOfTypesEntry.value:type_name -> apex.testing.MyType
	23, // 19: apex.testing.MyService.EmptyVoid:input_type -> google.protobuf.Empty
	1,  // 20: apex.testing.MyService.UnaryType:input_type -> apex.testing.MyType
	4,  // 21: apex.testing.MyService.UnaryEnum:input_type -> apex.testing.MyEnumValue
	24, // 22: apex.testing.MyService.UnaryAlias:input_type -> google.protobuf.StringValue
	24, // 23: apex.testing.MyService.UnaryString:input_type -> google.protobuf.StringValue
	25, // 24: apex.testing.MyService.UnaryI64:input_type -> google.protobuf.Int64Value
	26, // 25: apex.testing.MyService.UnaryI32:input_type -> google.protobuf.Int32Value
	26, // 26: apex.testing.MyService.UnaryI16:input_type -> google.protobuf.Int32Value
	26, // 27: apex.testing.MyService.UnaryI8:input_type -> google.protobuf.Int32Value
	27, // 28: apex.testing.MyService.UnaryU64:input_type -> google.protobuf.UInt64Value
	28, // 29: apex.testing.MyService.UnaryU32:input_type -> google.protobuf.UInt32Value
	28, // 30: apex.testing.MyService.UnaryU16:input_type -> google.protobuf.UInt32Value
	28, // 31: apex.testing.MyService.UnaryU8:input_type -> google.protobuf.UInt32Value
	29, // 32: apex.testing.MyService.UnaryF64:input_type -> google.protobuf.DoubleValue
	30, // 33: apex.testing.MyService.UnaryF32:input_type -> google.protobuf.FloatValue
	31, // 34: apex.testing.MyService.UnaryBytes:input_type -> google.protobuf.BytesValue
	5,  // 35: apex.testing.MyService.FuncType:input_type -> apex.testing.MyServiceFuncTypeArgs
	6,  // 36: apex.testing.MyService.FuncEnum:input_type -> apex.testing.MyServiceFuncEnumArgs
	7,  // 37: apex.testing.MyService.FuncAlias:input_type -> apex.testing.MyServiceFuncAliasArgs
	8,  // 38: apex.testing.MyService.FuncString:input_type -> apex.testing.MyServiceFuncStringArgs
	9,  // 39: apex.testing.MyService.FuncI64:input_type -> apex.testing.MyServiceFuncI64Args
	10, // 40: apex.testing.MyService.FuncI32:input_type -> apex.testing.MyServiceFuncI32Args
	11, // 41: apex.testing.MyService.FuncI16:input_type -> apex.testing.MyServiceFuncI16Args
	12, // 42: apex.testing.MyService.FuncI8:input_type -> apex.testing.MyServiceFuncI8Args
	13, // 43: apex.testing.MyService.FuncU64:input_type -> apex.testing.MyServiceFuncU64Args
	14, // 44: apex.testing.MyService.FuncU32:input_type -> apex.testing.MyServiceFuncU32Args
	15, // 45: apex.testing.MyService.FuncU16:input_type -> apex.testing.MyServiceFuncU16Args
	16, // 46: apex.testing.MyService.FuncU8:input_type -> apex.testing.MyServiceFuncU8Args
	17, // 47: apex.testing.MyService.FuncF64:input_type -> apex.testing.MyServiceFuncF64Args
	18, // 48: apex.testing.MyService.FuncF32:input_type -> apex.testing.MyServiceFuncF32Args
	19, // 49: apex.testing.MyService.FuncBytes:input_type -> apex.testing.MyServiceFuncBytesArgs
	23, // 50: apex.testing.MyService.EmptyVoid:output_type -> google.protobuf.Empty
	1,  // 51: apex.testing.MyService.UnaryType:output_type -> apex.testing.MyType
	4,  // 52: apex.testing.MyService.UnaryEnum:output_type -> apex.testing.MyEnumValue
	24, // 53: apex.testing.MyService.UnaryAlias:output_type -> google.protobuf.StringValue
	24, // 54: apex.testing.MyService.UnaryString:output_type -> google.protobuf.StringValue
	25, // 55: apex.testing.MyService.UnaryI64:output_type -> google.protobuf.Int64Value
	26, // 56: apex.testing.MyService.UnaryI32:output_type -> google.protobuf.Int32Value
	26, // 57: apex.testing.MyService.UnaryI16:output_type -> google.protobuf.Int32Value
	26, // 58: apex.testing.MyService.UnaryI8:output_type -> google.protobuf.Int32Value
	27, // 59: apex.testing.MyService.UnaryU64:output_type -> google.protobuf.UInt64Value
	28, // 60: apex.testing.MyService.UnaryU32:output_type -> google.protobuf.UInt32Value
	28, // 61: apex.testing.MyService.UnaryU16:output_type -> google.protobuf.UInt32Value
	28, // 62: apex.testing.MyService.UnaryU8:output_type -> google.protobuf.UInt32Value
	29, // 63: apex.testing.MyService.UnaryF64:output_type -> google.protobuf.DoubleValue
	30, // 64: apex.testing.MyService.UnaryF32:output_type -> google.protobuf.FloatValue
	31, // 65: apex.testing.MyService.UnaryBytes:output_type -> google.protobuf.BytesValue
	1,  // 66: apex.testing.MyService.FuncType:output_type -> apex.testing.MyType
	4,  // 67: apex.testing.MyService.FuncEnum:output_type -> apex.testing.MyEnumValue
	24, // 68: apex.testing.MyService.FuncAlias:output_type -> google.protobuf.StringValue
	24, // 69: apex.testing.MyService.FuncString:output_type -> google.protobuf.StringValue
	25, // 70: apex.testing.MyService.FuncI64:output_type -> google.protobuf.Int64Value
	26, // 71: apex.testing.MyService.FuncI32:output_type -> google.protobuf.Int32Value
	26, // 72: apex.testing.MyService.FuncI16:output_type -> google.protobuf.Int32Value
	26, // 73: apex.testing.MyService.FuncI8:output_type -> google.protobuf.Int32Value
	27, // 74: apex.testing.MyService.FuncU64:output_type -> google.protobuf.UInt64Value
	28, // 75: apex.testing.MyService.FuncU32:output_type -> google.protobuf.UInt32Value
	28, // 76: apex.testing.MyService.FuncU16:output_type -> google.protobuf.UInt32Value
	28, // 77: apex.testing.MyService.FuncU8:output_type -> google.protobuf.UInt32Value
	29, // 78: apex.testing.MyService.FuncF64:output_type -> google.protobuf.DoubleValue
	30, // 79: apex.testing.MyService.FuncF32:output_type -> google.protobuf.FloatValue
	31, // 80: apex.testing.MyService.FuncBytes:output_type -> google.protobuf.BytesValue
	50, // [50:81] is the sub-list for method output_type
	19, // [19:50] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_proto_service_proto_init() }
func file_proto_service_proto_init() {
	if File_proto_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyOtherType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyEnumValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyServiceFuncTypeArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyServiceFuncEnumArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyServiceFuncAliasArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyServiceFuncStringArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyServiceFuncI64Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyServiceFuncI32Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyServiceFuncI16Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyServiceFuncI8Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyServiceFuncU64Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyServiceFuncU32Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyServiceFuncU16Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyServiceFuncU8Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyServiceFuncF64Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyServiceFuncF32Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyServiceFuncBytesArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_service_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_proto_service_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*MyUnion_MyTypeValue)(nil),
		(*MyUnion_MyEnumValue)(nil),
		(*MyUnion_StringValue)(nil),
	}
	file_proto_service_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_proto_service_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_proto_service_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_proto_service_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_proto_service_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_proto_service_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_proto_service_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_proto_service_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_proto_service_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_proto_service_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_proto_service_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_proto_service_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_proto_service_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_proto_service_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_proto_service_proto_msgTypes[18].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_service_proto_goTypes,
		DependencyIndexes: file_proto_service_proto_depIdxs,
		EnumInfos:         file_proto_service_proto_enumTypes,
		MessageInfos:      file_proto_service_proto_msgTypes,
	}.Build()
	File_proto_service_proto = out.File
	file_proto_service_proto_rawDesc = nil
	file_proto_service_proto_goTypes = nil
	file_proto_service_proto_depIdxs = nil
}
