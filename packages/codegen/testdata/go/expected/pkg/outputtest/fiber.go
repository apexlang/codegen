// Code generated by @apexlang/codegen. DO NOT EDIT.

package outputtest

import (
	"github.com/gofiber/fiber/v2"

	"github.com/google/uuid"

	"github.com/apexlang/api-go/transport/httpresponse"
	"github.com/apexlang/api-go/transport/tfiber"
)

const _ = httpresponse.Package

func MyServiceFiber(service MyService) tfiber.RegisterFn {
	return func(router fiber.Router) {
		router.Get("/v1", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			err := service.EmptyVoid(ctx)
			return err
		})
		router.Post("/v1/unaryType", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			var args MyType
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.UnaryType(ctx, &args)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/unaryEnum", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			var args MyEnum
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.UnaryEnum(ctx, args)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/unaryAlias", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			var args uuid.UUID
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.UnaryAlias(ctx, args)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/unaryString", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			var args string
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.UnaryString(ctx, args)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/unaryI64", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			var args int64
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.UnaryI64(ctx, args)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/unaryI32", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			var args int32
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.UnaryI32(ctx, args)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/unaryI16", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			var args int16
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.UnaryI16(ctx, args)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/unaryI8", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			var args int8
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.UnaryI8(ctx, args)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/unaryU64", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			var args uint64
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.UnaryU64(ctx, args)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/unaryU32", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			var args uint32
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.UnaryU32(ctx, args)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/unaryU16", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			var args uint16
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.UnaryU16(ctx, args)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/unaryU8", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			var args uint8
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.UnaryU8(ctx, args)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/unaryF64", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			var args float64
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.UnaryF64(ctx, args)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/unaryF32", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			var args float32
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.UnaryF32(ctx, args)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/unaryBytes", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			var args []byte
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.UnaryBytes(ctx, args)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/funcType", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			type MyServiceFuncTypeArgs struct {
				Value    MyType  `json:"value" yaml:"value" msgpack:"value"`
				Optional *MyType `json:"optional,omitempty" yaml:"optional,omitempty" msgpack:"optional,omitempty"`
			}

			var args MyServiceFuncTypeArgs
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.FuncType(ctx, &args.Value, args.Optional)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/funcEnum", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			type MyServiceFuncEnumArgs struct {
				Value    MyEnum  `json:"value" yaml:"value" msgpack:"value"`
				Optional *MyEnum `json:"optional,omitempty" yaml:"optional,omitempty" msgpack:"optional,omitempty"`
			}

			var args MyServiceFuncEnumArgs
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.FuncEnum(ctx, args.Value, args.Optional)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/funcEnum", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			type MyServiceFuncAliasArgs struct {
				Value    uuid.UUID  `json:"value" yaml:"value" msgpack:"value"`
				Optional *uuid.UUID `json:"optional,omitempty" yaml:"optional,omitempty" msgpack:"optional,omitempty"`
			}

			var args MyServiceFuncAliasArgs
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.FuncAlias(ctx, args.Value, args.Optional)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/funcString", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			type MyServiceFuncStringArgs struct {
				Value    string  `json:"value" yaml:"value" msgpack:"value"`
				Optional *string `json:"optional,omitempty" yaml:"optional,omitempty" msgpack:"optional,omitempty"`
			}

			var args MyServiceFuncStringArgs
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.FuncString(ctx, args.Value, args.Optional)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/funcI64", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			type MyServiceFuncI64Args struct {
				Value    int64  `json:"value" yaml:"value" msgpack:"value"`
				Optional *int64 `json:"optional,omitempty" yaml:"optional,omitempty" msgpack:"optional,omitempty"`
			}

			var args MyServiceFuncI64Args
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.FuncI64(ctx, args.Value, args.Optional)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/funcI32", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			type MyServiceFuncI32Args struct {
				Value    int32  `json:"value" yaml:"value" msgpack:"value"`
				Optional *int32 `json:"optional,omitempty" yaml:"optional,omitempty" msgpack:"optional,omitempty"`
			}

			var args MyServiceFuncI32Args
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.FuncI32(ctx, args.Value, args.Optional)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/funcI16", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			type MyServiceFuncI16Args struct {
				Value    int16  `json:"value" yaml:"value" msgpack:"value"`
				Optional *int16 `json:"optional,omitempty" yaml:"optional,omitempty" msgpack:"optional,omitempty"`
			}

			var args MyServiceFuncI16Args
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.FuncI16(ctx, args.Value, args.Optional)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/funcI8", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			type MyServiceFuncI8Args struct {
				Value    int8  `json:"value" yaml:"value" msgpack:"value"`
				Optional *int8 `json:"optional,omitempty" yaml:"optional,omitempty" msgpack:"optional,omitempty"`
			}

			var args MyServiceFuncI8Args
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.FuncI8(ctx, args.Value, args.Optional)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/funcU64", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			type MyServiceFuncU64Args struct {
				Value    uint64  `json:"value" yaml:"value" msgpack:"value"`
				Optional *uint64 `json:"optional,omitempty" yaml:"optional,omitempty" msgpack:"optional,omitempty"`
			}

			var args MyServiceFuncU64Args
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.FuncU64(ctx, args.Value, args.Optional)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/funcU32", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			type MyServiceFuncU32Args struct {
				Value    uint32  `json:"value" yaml:"value" msgpack:"value"`
				Optional *uint32 `json:"optional,omitempty" yaml:"optional,omitempty" msgpack:"optional,omitempty"`
			}

			var args MyServiceFuncU32Args
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.FuncU32(ctx, args.Value, args.Optional)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/funcU16", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			type MyServiceFuncU16Args struct {
				Value    uint16  `json:"value" yaml:"value" msgpack:"value"`
				Optional *uint16 `json:"optional,omitempty" yaml:"optional,omitempty" msgpack:"optional,omitempty"`
			}

			var args MyServiceFuncU16Args
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.FuncU16(ctx, args.Value, args.Optional)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/funcU8", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			type MyServiceFuncU8Args struct {
				Value    uint8  `json:"value" yaml:"value" msgpack:"value"`
				Optional *uint8 `json:"optional,omitempty" yaml:"optional,omitempty" msgpack:"optional,omitempty"`
			}

			var args MyServiceFuncU8Args
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.FuncU8(ctx, args.Value, args.Optional)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/funcF64", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			type MyServiceFuncF64Args struct {
				Value    float64  `json:"value" yaml:"value" msgpack:"value"`
				Optional *float64 `json:"optional,omitempty" yaml:"optional,omitempty" msgpack:"optional,omitempty"`
			}

			var args MyServiceFuncF64Args
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.FuncF64(ctx, args.Value, args.Optional)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/funcF32", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			type MyServiceFuncF32Args struct {
				Value    float32  `json:"value" yaml:"value" msgpack:"value"`
				Optional *float32 `json:"optional,omitempty" yaml:"optional,omitempty" msgpack:"optional,omitempty"`
			}

			var args MyServiceFuncF32Args
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.FuncF32(ctx, args.Value, args.Optional)
			return tfiber.Response(c, resp, result, err)
		})
		router.Post("/v1/funcBytes", func(c *fiber.Ctx) error {
			resp := httpresponse.New()
			ctx := httpresponse.NewContext(c.Context(), resp)
			type MyServiceFuncBytesArgs struct {
				Value    []byte `json:"value" yaml:"value" msgpack:"value"`
				Optional []byte `json:"optional,omitempty" yaml:"optional,omitempty" msgpack:"optional,omitempty"`
			}

			var args MyServiceFuncBytesArgs
			if err := c.BodyParser(&args); err != nil {
				return err
			}
			result, err := service.FuncBytes(ctx, args.Value, args.Optional)
			return tfiber.Response(c, resp, result, err)
		})
	}
}
