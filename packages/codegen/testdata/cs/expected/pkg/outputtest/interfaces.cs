// Code generated by @apexlang/codegen. DO NOT EDIT.

namespace Apex.Testing
{
	using Uuid = string;

	public interface MyService
	{
		public void EmptyVoid();

		public MyType UnaryType(MyType value);

		public MyEnum UnaryEnum(MyEnum value);

		public Uuid UnaryAlias(Uuid value);

		public string UnaryString(string value);

		public long UnaryI64(long value);

		public int UnaryI32(int value);

		public short UnaryI16(short value);

		public sbyte UnaryI8(sbyte value);

		public ulong UnaryU64(ulong value);

		public uint UnaryU32(uint value);

		public ushort UnaryU16(ushort value);

		public byte UnaryU8(byte value);

		public double UnaryF64(double value);

		public float UnaryF32(float value);

		public byte[] UnaryBytes(byte[] value);

		public MyType FuncType(MyType value, MyType? optional);

		public MyEnum FuncEnum(MyEnum value, MyEnum? optional);

		public Uuid FuncAlias(Uuid value, Uuid? optional);

		public string FuncString(string value, string? optional);

		public long FuncI64(long value, long? optional);

		public int FuncI32(int value, int? optional);

		public short FuncI16(short value, short? optional);

		public sbyte FuncI8(sbyte value, sbyte? optional);

		public ulong FuncU64(ulong value, ulong? optional);

		public uint FuncU32(uint value, uint? optional);

		public ushort FuncU16(ushort value, ushort? optional);

		public byte FuncU8(byte value, byte? optional);

		public double FuncF64(double value, double? optional);

		public float FuncF32(float value, float? optional);

		public byte[] FuncBytes(byte[] value, byte[]? optional);
	}

	public interface Repository
	{
		public MyType GetData();
	}

	// MyType is a class
	public record MyType {
		// same type value
		public MyType? SameValue   { get; set; }

		// type value
		public MyOtherType TypeValue   { get; set; }

		// string value
		public string StringValue   { get; set; }

		// string option
		public string? StringOption   { get; set; }

		// i64 value
		public long I64Value   { get; set; }

		// i64 option
		public long? I64Option   { get; set; }

		// i32 value
		public int I32Value   { get; set; }

		// i32 option
		public int? I32Option   { get; set; }

		// i16 value
		public short I16Value   { get; set; }

		// i16 option
		public short? I16Option   { get; set; }

		// i8 value
		public sbyte I8Value   { get; set; }

		// i8 option
		public sbyte? I8Option   { get; set; }

		// u64 value
		public ulong U64Value   { get; set; }

		// u64 option
		public ulong? U64Option   { get; set; }

		// u32 value
		public uint U32Value   { get; set; }

		// u32 option
		public uint? U32Option   { get; set; }

		// u16 value
		public ushort U16Value   { get; set; }

		// u16 option
		public ushort? U16Option   { get; set; }

		// u8 value
		public byte U8Value   { get; set; }

		// u8 option
		public byte? U8Option   { get; set; }

		// f64 value
		public double F64Value   { get; set; }

		// f64 option
		public double? F64Option   { get; set; }

		// f32 value
		public float F32Value   { get; set; }

		// f32 option
		public float? F32Option   { get; set; }

		// datetime value
		public DateTime DatetimeValue   { get; set; }

		// datetime option
		public DateTime? DatetimeOption   { get; set; }

		// bytes value
		public byte[] BytesValue   { get; set; }

		// bytes option
		public byte[]? BytesOption   { get; set; }

		// map value
		public Dictionary<string, long> MapValue   { get; set; }

		// map of types
		public Dictionary<string, MyType> MapOfTypes   { get; set; }

		// array value
		public List<string> ArrayValue   { get; set; }

		// array of types
		public List<MyType> ArrayOfTypes   { get; set; }

		// union value
		public MyUnion UnionValue   { get; set; }

		// union option
		public MyUnion? UnionOption   { get; set; }

		// enum value
		public MyEnum EnumValue   { get; set; }

		// enum option
		public MyEnum? EnumOption   { get; set; }

		// enum value
		public Uuid AliasValue   { get; set; }

		// enum option
		public Uuid? AliasOption   { get; set; }
	}

	public record MyOtherType {
		public string Foo   { get; set; }

		public string Bar   { get; set; }
	}

	public record MyUnion {
		public MyType MyType;
		public MyEnum MyEnum;
		public String string;
	}

	// MyEnum is an emuneration
	public enum MyEnum {
		One,
		Two,
		Three
	}

	public static class Extensions
	{
		public static int Value(this MyEnum enumValue)
		{
			//Do something here
			return (int)enumValue;
		}
	}
}
